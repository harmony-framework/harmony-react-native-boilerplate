{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Harmony Harmony Boilerplate gives you the best developer experience with all the features you need for production based react-native & redux: react native navigation, TypeScript support, sagas, and more. No config needed. Quick Start Quick start Download The Harmony project Install Harmony $ npm install Setup iOS & Android $ react-native init YourProjectName $ Copy ios and android folders into the boilerplate folder $ cd ios and run pod install Run iOS & Android $ npm start Features Features flash_on Speeds up development We did most of the heavy lifting for you to provide a better experience with boilerplates code Best Practice Predefined integrations that let you deliver your app as fast as you can. check_circle Static-Typing The boilerplate comes with Typescript built-in provided with pre-defined rule-set for better writing and predective bad practices. traffic Flow Management Integrated flow management system rocket Debugging Ready-To-Use integration with Flipper to enable you to debug your app. language Multilingual Support Easy to add and support multiple languages with react-intl . Tools Tools","title":"Harmony"},{"location":"#harmony","text":"Harmony Boilerplate gives you the best developer experience with all the features you need for production based react-native & redux: react native navigation, TypeScript support, sagas, and more. No config needed.","title":"Harmony"},{"location":"#quick-start","text":"","title":"Quick Start"},{"location":"#features","text":"","title":"Features"},{"location":"#tools","text":"","title":"Tools"},{"location":"contributing/","text":"Contributing Interested in contributing to the harmony boilerplate? Want to report a bug? Before you do, please read the following guidelines. Submission context Found a bug? If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix. However, before doing so, please read the submission guidelines . Missing a feature? You can request a new feature by submitting an issue to our GitHub Repository. If you would like to implement a new feature, please submit an issue with a proposal for your work first, to be sure that it is of use for everyone, as the Material theme is highly opinionated. Please consider what kind of change it is: For a major feature , first open an issue and outline your proposal so that it can be discussed. This will also allow us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project. Small features and bugs can be crafted and directly submitted as a Pull Request. However, there is no guarantee that your feature will make it into the master, as it's always a matter of opinion whether if benefits the overall functionality of the theme. Submission guidelines Submitting an issue Before you submit an issue, please search the issue tracker, maybe an issue for your problem already exists and the discussion might inform you of workarounds readily available. We want to fix all the issues as soon as possible, but before fixing a bug we need to reproduce and confirm it. In order to reproduce bugs we will systematically ask you to provide a minimal reproduction scenario using the custom issue template. Please stick to the issue template. Unfortunately we are not able to investigate / fix bugs without a minimal reproduction scenario, so if we don't hear back from you we may close the issue. Submitting a Pull Request (PR) Search GitHub for an open or closed PR that relates to your submission. You don't want to duplicate effort. If you do not find a related issue or PR, go ahead. Development : Fork the project, set up development environment, make your changes in a separate git branch and add descriptive messages to your commits. Build : Before submitting a pull requests, build the boilerplate ( dev and prod ). This is a mandatory requirement for your PR to get accepted, as the boilerplate should at all times be installable through GitHub. Pull Request : After building the boilerplate, commit the changes, push your branch to GitHub and send a PR to harmony-react-native-boilerplate:master . If we suggest changes, make the required updates, rebase your branch and push the changes to your GitHub repository, which will automatically update your PR. After your PR is merged, you can safely delete your branch and pull the changes from the main (upstream) repository.","title":"Contributing"},{"location":"contributing/#contributing","text":"Interested in contributing to the harmony boilerplate? Want to report a bug? Before you do, please read the following guidelines.","title":"Contributing"},{"location":"contributing/#submission-context","text":"","title":"Submission context"},{"location":"contributing/#found-a-bug","text":"If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix. However, before doing so, please read the submission guidelines .","title":"Found a bug?"},{"location":"contributing/#missing-a-feature","text":"You can request a new feature by submitting an issue to our GitHub Repository. If you would like to implement a new feature, please submit an issue with a proposal for your work first, to be sure that it is of use for everyone, as the Material theme is highly opinionated. Please consider what kind of change it is: For a major feature , first open an issue and outline your proposal so that it can be discussed. This will also allow us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project. Small features and bugs can be crafted and directly submitted as a Pull Request. However, there is no guarantee that your feature will make it into the master, as it's always a matter of opinion whether if benefits the overall functionality of the theme.","title":"Missing a feature?"},{"location":"contributing/#submission-guidelines","text":"","title":"Submission guidelines"},{"location":"contributing/#submitting-an-issue","text":"Before you submit an issue, please search the issue tracker, maybe an issue for your problem already exists and the discussion might inform you of workarounds readily available. We want to fix all the issues as soon as possible, but before fixing a bug we need to reproduce and confirm it. In order to reproduce bugs we will systematically ask you to provide a minimal reproduction scenario using the custom issue template. Please stick to the issue template. Unfortunately we are not able to investigate / fix bugs without a minimal reproduction scenario, so if we don't hear back from you we may close the issue.","title":"Submitting an issue"},{"location":"contributing/#submitting-a-pull-request-pr","text":"Search GitHub for an open or closed PR that relates to your submission. You don't want to duplicate effort. If you do not find a related issue or PR, go ahead. Development : Fork the project, set up development environment, make your changes in a separate git branch and add descriptive messages to your commits. Build : Before submitting a pull requests, build the boilerplate ( dev and prod ). This is a mandatory requirement for your PR to get accepted, as the boilerplate should at all times be installable through GitHub. Pull Request : After building the boilerplate, commit the changes, push your branch to GitHub and send a PR to harmony-react-native-boilerplate:master . If we suggest changes, make the required updates, rebase your branch and push the changes to your GitHub repository, which will automatically update your PR. After your PR is merged, you can safely delete your branch and pull the changes from the main (upstream) repository.","title":"Submitting a Pull Request (PR)"},{"location":"customization/","text":"Customization","title":"Customization"},{"location":"customization/#customization","text":"","title":"Customization"},{"location":"develop-with-harmony/","text":"Flow Data The following diagram display basic redux architecture with few Harmony Features. You can get more information on every feature in the docs.","title":"Harmony Architecture"},{"location":"develop-with-harmony/#flow-data","text":"The following diagram display basic redux architecture with few Harmony Features. You can get more information on every feature in the docs.","title":"Flow Data"},{"location":"getting-started/","text":"Introduction How to read Harmony Documentation Harmony Documentation built by steps to make it easy for you to get started and understand the full framework. Please following the Next button at the bottom of the page. Harmony is a boilerplate to enable fast on-boarding when it comes to developing mobile applications with the focus on React Redux and Flow Management. Harmony suggest new features and improve your flexibility by adding your customized features. Harmony Boilerplate focus on performance and Best Practices to build the most updated mobile application Installation Download The Harmony project Install Harmony $ npm install Setup iOS & Android $ react-native init YourProjectName $ Copy ios and android folders into the boilerplate folder $ cd ios and run pod install Run the Project Run for Development $ npm start What next ? Congratulations, you start your first Harmony mobile app. Now go on and explore how to develop your next mobile app easily with our feathers.","title":"Getting started"},{"location":"getting-started/#introduction","text":"How to read Harmony Documentation Harmony Documentation built by steps to make it easy for you to get started and understand the full framework. Please following the Next button at the bottom of the page. Harmony is a boilerplate to enable fast on-boarding when it comes to developing mobile applications with the focus on React Redux and Flow Management. Harmony suggest new features and improve your flexibility by adding your customized features. Harmony Boilerplate focus on performance and Best Practices to build the most updated mobile application","title":"Introduction"},{"location":"getting-started/#installation","text":"Download The Harmony project Install Harmony $ npm install Setup iOS & Android $ react-native init YourProjectName $ Copy ios and android folders into the boilerplate folder $ cd ios and run pod install","title":"Installation"},{"location":"getting-started/#run-the-project","text":"Run for Development $ npm start","title":"Run the Project"},{"location":"getting-started/#what-next","text":"Congratulations, you start your first Harmony mobile app. Now go on and explore how to develop your next mobile app easily with our feathers.","title":"What next ?"},{"location":"license/","text":"License MIT License Copyright \u00a9 2017 - 2020 Harmony Framework Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Note - the copy right thing is only if there is copy right comment block in the code, there is no need to mention us or give any attribution.","title":"License"},{"location":"license/#license","text":"MIT License Copyright \u00a9 2017 - 2020 Harmony Framework Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Note - the copy right thing is only if there is copy right comment block in the code, there is no need to mention us or give any attribution.","title":"License"},{"location":"material-getting-started/","text":"Getting started Installation Set up Material using Docker The official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image (28MB compressed). Installing MkDocs Before installing MkDocs , you need to make sure you have Python and pip \u2013 the Python package manager \u2013 up and running. You can verify if you're already good to go with the following commands: python --version # Python 2.7.13 pip --version # pip 9.0.1 Installing and verifying MkDocs is as simple as: pip install mkdocs && mkdocs --version # mkdocs, version 0.16.0 MkDocs version requirements Material requires MkDocs >= 0.16. Furthermore, it is highly recommended to install Pygments and the PyMdown Extensions to get the most out of the Material theme: pip install pygments pip install pymdown-extensions Installing Material using pip Material can be installed with pip : pip install mkdocs-material using choco If you're on Windows you can use Chocolatey to install Material : choco install mkdocs-material This will also install all required dependencies like Python and MkDocs . cloning from GitHub Material can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github.com/squidfunk/mkdocs-material.git This is especially useful if you want to extend the theme and override some parts of the theme. The theme will reside in the folder mkdocs-material/material . Troubleshooting Installation on macOS When you're running the pre-installed version of Python on macOS, pip tries to install packages in a folder for which your user might not have the adequate permissions. There are two possible solutions for this: Installing in user space (recommended): Provide the --user flag to the install command and pip will install the package in a user-site location. This is the recommended way. Switching to a homebrewed Python : Upgrade your Python installation to a self-contained solution by installing Python with Homebrew. This should eliminate a lot of problems you may be having with pip . Error: unrecognized theme 'material' If you run into this error, the most common reason is that you installed MkDocs through some package manager (e.g. Homebrew or apt-get ) and the Material theme through pip , so both packages end up in different locations. MkDocs only checks it's install location for themes. Usage In order to enable the Material theme just add one of the following lines to your mkdocs.yml . If you installed Material using pip: theme : 'material' If you cloned Material from GitHub: theme_dir : 'mkdocs-material/material' MkDocs includes a development server, so you can review your changes as you go. The development server can be started with the following command: mkdocs serve Now you can point your browser to localhost:8000 and the Material theme should be visible. From here on, you can start writing your documentation, or read on and customize the theme through some options. Options The Material theme adds some extra variables for configuration via your project's mkdocs.yml . See the following sections for all available options. Changing the color palette Material defines a default hue for every primary and accent color on Google's Material Design color palette . This makes it very easy to change the overall look of the theme. Just set the primary and accent colors using the following variables in your mkdocs.yml : extra : palette : primary : 'indigo' accent : 'light blue' Color names are case-insensitive, but must match the names of the Material Design color palette. Valid values are: red , pink , purple , deep purple , indigo , blue , light blue , cyan , teal , green , light green , lime , yellow , amber , orange , deep orange , brown , grey and blue grey . The last three colors can only be used as a primary color. If the color is set via this configuration, an additional CSS file that defines the color palette is included. If you want to keep things lean, clone the repository and recompile the theme with your custom colors set. See the guide on customization for more information. Primary colors Click on a tile to change the primary color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; }) }) Accent colors Click on a tile to change the accent color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; }) }) Changing the font family Material uses the Roboto font family by default, specifically the regular sans-serif type for text and the monospaced type for code. Both fonts are loaded from Google Fonts and can easily be changed to other fonts, like for example the Ubuntu font family : extra : font : text : 'Ubuntu' code : 'Ubuntu Mono' The text font will be loaded in font-weights 400 and 700 , the monospaced font in regular weight. If you want to load fonts from other destinations or don't want to use the Google Fonts loading magic, just set font to false : extra : font : false Adding a source repository To include a link to the repository of your project within your documentation, set the following variables via your project's mkdocs.yml : repo_name : 'my-github-handle/my-project' repo_url : 'https://github.com/my-github-handle/my-project' Material will render the name of the repository next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Furthermore, if repo_url points to a GitHub, BitBucket or GitLab repository, the respective service logo will be shown next to the name of the repository. Additionally, for GitHub, the number of stars and forks is shown. Why is there an edit button at the top of every article? If the repo_url is set to a GitHub or BitBucket repository, and the repo_name is set to GitHub or BitBucket (implied by default), an edit button will appear at the top of every article. This is the automatic behavior that MkDocs implements. See the MkDocs documentation on more guidance regarding the edit_uri attribute, which defines whether the edit button is shown or not. Adding a logo Material makes it easy to add your logo. Your logo should have rectangular shape with a minimum resolution of 128x128, leave some room towards the edges and be composed of high contrast areas on a transparent ground, as it will be placed on the colored header bar and drawer. Simply create the folder docs/images , add your logo and embed it with: extra : logo : 'images/logo.svg' Adding social links If you want to link your social accounts, the Material theme provides an easy way for doing this in the footer of the documentation using the automatically included FontAwesome webfont. The syntax is simple \u2013 the type must denote the name of the social service, e.g. github , twitter or linkedin and the link must contain the URL you want to link to: extra : social : - type : 'github' link : 'https://github.com/squidfunk' - type : 'twitter' link : 'https://twitter.com/squidfunk' - type : 'linkedin' link : 'https://de.linkedin.com/in/martin-donath-20a95039' The links are generated in order and the type of the links must match the name of the FontAwesome glyph. The fa is automatically added, so github will result in fa fa-github . Google Analytics integration MkDocs makes it easy to integrate site tracking with Google Analytics. Besides basic tracking, clicks on all outgoing links can be tracked as well as how site search is used. Tracking can be activated in your project's mkdocs.yml : google_analytics : - 'UA-XXXXXXXX-X' - 'auto' Disqus integation Material for MkDocs is integrated with Disqus , so if you want to add a comments section to your documentation set the shortname of your Disqus project in your mkdocs.yml : extra : disqus : 'your-disqus-shortname' A new entry at the bottom of the table of contents is generated that is linking to the comments section. The necessary JavaScript is automatically included. Localization Material for MkDocs supports internationalization (i18n). In order to translate the labels (e.g. Previous and Next in the footer), you can override the file partials/language.html and provide your own translations inside the macro t : {% macro t ( key ) %}{{ { \"language\" : \"en\" , \"edit.link.title\" : \"Edit this page\" , \"footer.previous\" : \"Previous\" , \"footer.next\" : \"Next\" , \"meta.comments\" : \"Comments\" , \"meta.source\" : \"Source\" , \"search.placeholder\" : \"Search\" , \"search.result.placeholder\" : \"Type to start searching\" , \"search.result.none\" : \"No matching documents\" , \"search.result.one\" : \"1 matching document\" , \"search.result.other\" : \"# matching documents\" , \"source.link.title\" : \"Go to repository\" , \"toc.title\" : \"Table of contents\" }[ key ] }}{% endmacro %} Just copy the file from the original theme and make your adjustments. See the section on overriding partials and the general guide on theme extension in the customization guide. Tabs From version 1.1.0 on, Material supports another layer on top of the main navigation for larger screens in the form of tabs. This is especially useful for larger documentation projects with a few top-level sections. Tabs can be enabled by setting the respective feature flag to true: extra : feature : tabs : true More advanced customization If you want to change the general appearance of the Material theme, see this article for more information on advanced customization. Extensions MkDocs supports several Markdown extensions . The following extensions are not enabled by default (see the link for which are enabled by default) but highly recommended, so they should be switched on at all times: markdown_extensions : - admonition - codehilite(guess_lang=false) - toc(permalink=true) For more information, see the following list of extensions supported by the Material theme including more information regarding installation and usage: Admonition Codehilite Footnotes Metadata Permalinks PyMdown Extensions Full example Below is a full example configuration for a mkdocs.yml : # Project information site_name : 'My Project' site_description : 'A short description of my project' site_author : 'John Doe' site_url : 'https://my-github-handle.github.io/my-project' # Repository repo_name : 'my-github-handle/my-project' repo_url : 'https://github.com/my-github-handle/my-project' # Copyright copyright : 'Copyright &copy; 2016 - 2017 John Doe' # Documentation and theme theme : 'material' # Options extra : logo : 'images/logo.svg' palette : primary : 'indigo' accent : 'indigo' font : text : 'Roboto' code : 'Roboto Mono' social : - type : 'github' link : 'https://github.com/john-doe' - type : 'twitter' link : 'https://twitter.com/jonh-doe' - type : 'linkedin' link : 'https://de.linkedin.com/in/john-doe' # Google Analytics google_analytics : - 'UA-XXXXXXXX-X' - 'auto' # Extensions markdown_extensions : - admonition - codehilite(guess_lang=false) - toc(permalink=true)","title":"Getting started"},{"location":"material-getting-started/#getting-started","text":"","title":"Getting started"},{"location":"material-getting-started/#installation","text":"Set up Material using Docker The official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image (28MB compressed).","title":"Installation"},{"location":"material-getting-started/#installing-mkdocs","text":"Before installing MkDocs , you need to make sure you have Python and pip \u2013 the Python package manager \u2013 up and running. You can verify if you're already good to go with the following commands: python --version # Python 2.7.13 pip --version # pip 9.0.1 Installing and verifying MkDocs is as simple as: pip install mkdocs && mkdocs --version # mkdocs, version 0.16.0 MkDocs version requirements Material requires MkDocs >= 0.16. Furthermore, it is highly recommended to install Pygments and the PyMdown Extensions to get the most out of the Material theme: pip install pygments pip install pymdown-extensions","title":"Installing MkDocs"},{"location":"material-getting-started/#installing-material","text":"","title":"Installing Material"},{"location":"material-getting-started/#using-pip","text":"Material can be installed with pip : pip install mkdocs-material","title":"using pip"},{"location":"material-getting-started/#using-choco","text":"If you're on Windows you can use Chocolatey to install Material : choco install mkdocs-material This will also install all required dependencies like Python and MkDocs .","title":"using choco"},{"location":"material-getting-started/#cloning-from-github","text":"Material can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github.com/squidfunk/mkdocs-material.git This is especially useful if you want to extend the theme and override some parts of the theme. The theme will reside in the folder mkdocs-material/material .","title":"cloning from GitHub"},{"location":"material-getting-started/#troubleshooting","text":"Installation on macOS When you're running the pre-installed version of Python on macOS, pip tries to install packages in a folder for which your user might not have the adequate permissions. There are two possible solutions for this: Installing in user space (recommended): Provide the --user flag to the install command and pip will install the package in a user-site location. This is the recommended way. Switching to a homebrewed Python : Upgrade your Python installation to a self-contained solution by installing Python with Homebrew. This should eliminate a lot of problems you may be having with pip . Error: unrecognized theme 'material' If you run into this error, the most common reason is that you installed MkDocs through some package manager (e.g. Homebrew or apt-get ) and the Material theme through pip , so both packages end up in different locations. MkDocs only checks it's install location for themes.","title":"Troubleshooting"},{"location":"material-getting-started/#usage","text":"In order to enable the Material theme just add one of the following lines to your mkdocs.yml . If you installed Material using pip: theme : 'material' If you cloned Material from GitHub: theme_dir : 'mkdocs-material/material' MkDocs includes a development server, so you can review your changes as you go. The development server can be started with the following command: mkdocs serve Now you can point your browser to localhost:8000 and the Material theme should be visible. From here on, you can start writing your documentation, or read on and customize the theme through some options.","title":"Usage"},{"location":"material-getting-started/#options","text":"The Material theme adds some extra variables for configuration via your project's mkdocs.yml . See the following sections for all available options.","title":"Options"},{"location":"material-getting-started/#changing-the-color-palette","text":"Material defines a default hue for every primary and accent color on Google's Material Design color palette . This makes it very easy to change the overall look of the theme. Just set the primary and accent colors using the following variables in your mkdocs.yml : extra : palette : primary : 'indigo' accent : 'light blue' Color names are case-insensitive, but must match the names of the Material Design color palette. Valid values are: red , pink , purple , deep purple , indigo , blue , light blue , cyan , teal , green , light green , lime , yellow , amber , orange , deep orange , brown , grey and blue grey . The last three colors can only be used as a primary color. If the color is set via this configuration, an additional CSS file that defines the color palette is included. If you want to keep things lean, clone the repository and recompile the theme with your custom colors set. See the guide on customization for more information.","title":"Changing the color palette"},{"location":"material-getting-started/#primary-colors","text":"Click on a tile to change the primary color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; }) })","title":"Primary colors"},{"location":"material-getting-started/#accent-colors","text":"Click on a tile to change the accent color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; }) })","title":"Accent colors"},{"location":"material-getting-started/#changing-the-font-family","text":"Material uses the Roboto font family by default, specifically the regular sans-serif type for text and the monospaced type for code. Both fonts are loaded from Google Fonts and can easily be changed to other fonts, like for example the Ubuntu font family : extra : font : text : 'Ubuntu' code : 'Ubuntu Mono' The text font will be loaded in font-weights 400 and 700 , the monospaced font in regular weight. If you want to load fonts from other destinations or don't want to use the Google Fonts loading magic, just set font to false : extra : font : false","title":"Changing the font family"},{"location":"material-getting-started/#adding-a-source-repository","text":"To include a link to the repository of your project within your documentation, set the following variables via your project's mkdocs.yml : repo_name : 'my-github-handle/my-project' repo_url : 'https://github.com/my-github-handle/my-project' Material will render the name of the repository next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Furthermore, if repo_url points to a GitHub, BitBucket or GitLab repository, the respective service logo will be shown next to the name of the repository. Additionally, for GitHub, the number of stars and forks is shown. Why is there an edit button at the top of every article? If the repo_url is set to a GitHub or BitBucket repository, and the repo_name is set to GitHub or BitBucket (implied by default), an edit button will appear at the top of every article. This is the automatic behavior that MkDocs implements. See the MkDocs documentation on more guidance regarding the edit_uri attribute, which defines whether the edit button is shown or not.","title":"Adding a source repository"},{"location":"material-getting-started/#adding-a-logo","text":"Material makes it easy to add your logo. Your logo should have rectangular shape with a minimum resolution of 128x128, leave some room towards the edges and be composed of high contrast areas on a transparent ground, as it will be placed on the colored header bar and drawer. Simply create the folder docs/images , add your logo and embed it with: extra : logo : 'images/logo.svg'","title":"Adding a logo"},{"location":"material-getting-started/#adding-social-links","text":"If you want to link your social accounts, the Material theme provides an easy way for doing this in the footer of the documentation using the automatically included FontAwesome webfont. The syntax is simple \u2013 the type must denote the name of the social service, e.g. github , twitter or linkedin and the link must contain the URL you want to link to: extra : social : - type : 'github' link : 'https://github.com/squidfunk' - type : 'twitter' link : 'https://twitter.com/squidfunk' - type : 'linkedin' link : 'https://de.linkedin.com/in/martin-donath-20a95039' The links are generated in order and the type of the links must match the name of the FontAwesome glyph. The fa is automatically added, so github will result in fa fa-github .","title":"Adding social links"},{"location":"material-getting-started/#google-analytics-integration","text":"MkDocs makes it easy to integrate site tracking with Google Analytics. Besides basic tracking, clicks on all outgoing links can be tracked as well as how site search is used. Tracking can be activated in your project's mkdocs.yml : google_analytics : - 'UA-XXXXXXXX-X' - 'auto'","title":"Google Analytics integration"},{"location":"material-getting-started/#disqus-integation","text":"Material for MkDocs is integrated with Disqus , so if you want to add a comments section to your documentation set the shortname of your Disqus project in your mkdocs.yml : extra : disqus : 'your-disqus-shortname' A new entry at the bottom of the table of contents is generated that is linking to the comments section. The necessary JavaScript is automatically included.","title":"Disqus integation"},{"location":"material-getting-started/#localization","text":"Material for MkDocs supports internationalization (i18n). In order to translate the labels (e.g. Previous and Next in the footer), you can override the file partials/language.html and provide your own translations inside the macro t : {% macro t ( key ) %}{{ { \"language\" : \"en\" , \"edit.link.title\" : \"Edit this page\" , \"footer.previous\" : \"Previous\" , \"footer.next\" : \"Next\" , \"meta.comments\" : \"Comments\" , \"meta.source\" : \"Source\" , \"search.placeholder\" : \"Search\" , \"search.result.placeholder\" : \"Type to start searching\" , \"search.result.none\" : \"No matching documents\" , \"search.result.one\" : \"1 matching document\" , \"search.result.other\" : \"# matching documents\" , \"source.link.title\" : \"Go to repository\" , \"toc.title\" : \"Table of contents\" }[ key ] }}{% endmacro %} Just copy the file from the original theme and make your adjustments. See the section on overriding partials and the general guide on theme extension in the customization guide.","title":"Localization"},{"location":"material-getting-started/#tabs","text":"From version 1.1.0 on, Material supports another layer on top of the main navigation for larger screens in the form of tabs. This is especially useful for larger documentation projects with a few top-level sections. Tabs can be enabled by setting the respective feature flag to true: extra : feature : tabs : true","title":"Tabs"},{"location":"material-getting-started/#more-advanced-customization","text":"If you want to change the general appearance of the Material theme, see this article for more information on advanced customization.","title":"More advanced customization"},{"location":"material-getting-started/#extensions","text":"MkDocs supports several Markdown extensions . The following extensions are not enabled by default (see the link for which are enabled by default) but highly recommended, so they should be switched on at all times: markdown_extensions : - admonition - codehilite(guess_lang=false) - toc(permalink=true) For more information, see the following list of extensions supported by the Material theme including more information regarding installation and usage: Admonition Codehilite Footnotes Metadata Permalinks PyMdown Extensions","title":"Extensions"},{"location":"material-getting-started/#full-example","text":"Below is a full example configuration for a mkdocs.yml : # Project information site_name : 'My Project' site_description : 'A short description of my project' site_author : 'John Doe' site_url : 'https://my-github-handle.github.io/my-project' # Repository repo_name : 'my-github-handle/my-project' repo_url : 'https://github.com/my-github-handle/my-project' # Copyright copyright : 'Copyright &copy; 2016 - 2017 John Doe' # Documentation and theme theme : 'material' # Options extra : logo : 'images/logo.svg' palette : primary : 'indigo' accent : 'indigo' font : text : 'Roboto' code : 'Roboto Mono' social : - type : 'github' link : 'https://github.com/john-doe' - type : 'twitter' link : 'https://twitter.com/jonh-doe' - type : 'linkedin' link : 'https://de.linkedin.com/in/john-doe' # Google Analytics google_analytics : - 'UA-XXXXXXXX-X' - 'auto' # Extensions markdown_extensions : - admonition - codehilite(guess_lang=false) - toc(permalink=true)","title":"Full example"},{"location":"release-notes/","text":"Release notes Follow the repository on harmony-react-native-boilerplate","title":"Release notes"},{"location":"release-notes/#release-notes","text":"Follow the repository on harmony-react-native-boilerplate","title":"Release notes"},{"location":"specimen/","text":"Specimen Body copy Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras arcu libero, mollis sed massa vel, ornare viverra ex . Mauris a ullamcorper lacus. Nullam urna elit, malesuada eget finibus ut, ullamcorper ac tortor. Vestibulum sodales pulvinar nisl, pharetra aliquet est. Quisque volutpat erat ac nisi accumsan tempor. Sed suscipit , orci non pretium pretium, quam mi gravida metus, vel venenatis justo est condimentum diam. Maecenas non ornare justo. Nam a ipsum eros. Nulla aliquam orci sit amet nisl posuere malesuada. Proin aliquet nulla velit, quis ultricies orci feugiat et. Ut tincidunt sollicitudin tincidunt. Aenean ullamcorper sit amet nulla at interdum. Headings The 3 rd level The 4 th level The 5 th level The 6 th level Headings with secondary text The 3 rd level with secondary text The 4 th level with secondary text The 5 th level with secondary text The 6 th level with secondary text Blockquotes Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Sed molestie imperdiet consectetur. Blockquote nesting Sed aliquet , neque at rutrum mollis, neque nisi tincidunt nibh, vitae faucibus lacus nunc at lacus. Nunc scelerisque, quam id cursus sodales, lorem libero fermentum urna, ut efficitur elit ligula et nunc. Mauris dictum mi lacus, sit amet pellentesque urna vehicula fringilla. Ut sit amet placerat ante. Proin sed elementum nulla. Nunc vitae sem odio. Suspendisse ac eros arcu. Vivamus orci erat, volutpat a tempor et, rutrum. eu odio. Suspendisse rutrum facilisis risus , eu posuere neque commodo a. Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed nec leo bibendum, sodales mauris ut, tincidunt massa. Other content blocks Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. var _extends = function ( target ) { for ( var i = 1 ; i < arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; Praesent at return target , sodales nibh vel, tempor felis. Fusce vel lacinia lacus. Suspendisse rhoncus nunc non nisi iaculis ultrices. Donec consectetur mauris non neque imperdiet, eget volutpat libero. Lists Unordered lists Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris. Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh lacinia sed. Aenean in finibus diam. Ordered lists Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aliquam ornare feugiat quam et egestas. Nunc id erat et quam pellentesque lacinia eu vel odio. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Mauris dictum mi lacus Ut sit amet placerat ante Suspendisse ac eros arcu Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Sed aliquet, neque at rutrum mollis, neque nisi tincidunt nibh. Pellentesque eget var _extends ornare tellus, ut gravida mi. var _extends = function ( target ) { for ( var i = 1 ; i < arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. Definition lists Lorem ipsum dolor sit amet : Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Cras arcu libero : Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris. Code blocks Inline Morbi eget dapibus felis . Vivamus venenatis porttitor tortor sit amet rutrum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Pellentesque aliquet quam enim , eu volutpat urna rutrum a. Nam vehicula nunc return target mauris, a ultricies libero efficitur sed. Sed molestie imperdiet consectetur. Vivamus a pharetra leo. Pellentesque eget ornare tellus, ut gravida mi. Fusce vel lacinia lacus. Listing #!js hl_lines=\"8\" var _extends = function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { target[key] = source[key]; } } return target; }; Horizontal rules Aenean in finibus diam. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales. Data tables Sollicitudo / Pellentesi consectetur adipiscing elit arcu sed Vivamus a pharetra yes yes yes yes yes Ornare viverra ex yes yes yes yes yes Mauris a ullamcorper yes yes partial yes yes Nullam urna elit yes yes yes yes yes Malesuada eget finibus yes yes yes yes yes Ullamcorper yes yes yes yes yes Vestibulum sodales yes - yes - yes Pulvinar nisl yes yes yes - - Pharetra aliquet est yes yes yes yes yes Sed suscipit yes yes yes yes yes Orci non pretium yes partial - - - Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero. Left Center Right Lorem dolor amet ipsum sit Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. Table with colgroups (Pandoc) Lorem ipsum dolor sit amet. Sed sagittis eleifend rutrum. Donec vitae suscipit est.","title":"Specimen"},{"location":"specimen/#specimen","text":"","title":"Specimen"},{"location":"specimen/#body-copy","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras arcu libero, mollis sed massa vel, ornare viverra ex . Mauris a ullamcorper lacus. Nullam urna elit, malesuada eget finibus ut, ullamcorper ac tortor. Vestibulum sodales pulvinar nisl, pharetra aliquet est. Quisque volutpat erat ac nisi accumsan tempor. Sed suscipit , orci non pretium pretium, quam mi gravida metus, vel venenatis justo est condimentum diam. Maecenas non ornare justo. Nam a ipsum eros. Nulla aliquam orci sit amet nisl posuere malesuada. Proin aliquet nulla velit, quis ultricies orci feugiat et. Ut tincidunt sollicitudin tincidunt. Aenean ullamcorper sit amet nulla at interdum.","title":"Body copy"},{"location":"specimen/#headings","text":"","title":"Headings"},{"location":"specimen/#the-3rd-level","text":"","title":"The 3rd level"},{"location":"specimen/#the-4th-level","text":"","title":"The 4th level"},{"location":"specimen/#the-5th-level","text":"","title":"The 5th level"},{"location":"specimen/#the-6th-level","text":"","title":"The 6th level"},{"location":"specimen/#headings-with-secondary-text","text":"","title":"Headings with secondary text"},{"location":"specimen/#the-3rd-level-with-secondary-text","text":"","title":"The 3rd level with secondary text"},{"location":"specimen/#the-4th-level-with-secondary-text","text":"","title":"The 4th level with secondary text"},{"location":"specimen/#the-5th-level-with-secondary-text","text":"","title":"The 5th level with secondary text"},{"location":"specimen/#the-6th-level-with-secondary-text","text":"","title":"The 6th level with secondary text"},{"location":"specimen/#blockquotes","text":"Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Sed molestie imperdiet consectetur.","title":"Blockquotes"},{"location":"specimen/#blockquote-nesting","text":"Sed aliquet , neque at rutrum mollis, neque nisi tincidunt nibh, vitae faucibus lacus nunc at lacus. Nunc scelerisque, quam id cursus sodales, lorem libero fermentum urna, ut efficitur elit ligula et nunc. Mauris dictum mi lacus, sit amet pellentesque urna vehicula fringilla. Ut sit amet placerat ante. Proin sed elementum nulla. Nunc vitae sem odio. Suspendisse ac eros arcu. Vivamus orci erat, volutpat a tempor et, rutrum. eu odio. Suspendisse rutrum facilisis risus , eu posuere neque commodo a. Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed nec leo bibendum, sodales mauris ut, tincidunt massa.","title":"Blockquote nesting"},{"location":"specimen/#other-content-blocks","text":"Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. var _extends = function ( target ) { for ( var i = 1 ; i < arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; Praesent at return target , sodales nibh vel, tempor felis. Fusce vel lacinia lacus. Suspendisse rhoncus nunc non nisi iaculis ultrices. Donec consectetur mauris non neque imperdiet, eget volutpat libero.","title":"Other content blocks"},{"location":"specimen/#lists","text":"","title":"Lists"},{"location":"specimen/#unordered-lists","text":"Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris. Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh lacinia sed. Aenean in finibus diam.","title":"Unordered lists"},{"location":"specimen/#ordered-lists","text":"Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aliquam ornare feugiat quam et egestas. Nunc id erat et quam pellentesque lacinia eu vel odio. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Mauris dictum mi lacus Ut sit amet placerat ante Suspendisse ac eros arcu Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Sed aliquet, neque at rutrum mollis, neque nisi tincidunt nibh. Pellentesque eget var _extends ornare tellus, ut gravida mi. var _extends = function ( target ) { for ( var i = 1 ; i < arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo.","title":"Ordered lists"},{"location":"specimen/#definition-lists","text":"Lorem ipsum dolor sit amet : Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Cras arcu libero : Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris.","title":"Definition lists"},{"location":"specimen/#code-blocks","text":"","title":"Code blocks"},{"location":"specimen/#inline","text":"Morbi eget dapibus felis . Vivamus venenatis porttitor tortor sit amet rutrum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Pellentesque aliquet quam enim , eu volutpat urna rutrum a. Nam vehicula nunc return target mauris, a ultricies libero efficitur sed. Sed molestie imperdiet consectetur. Vivamus a pharetra leo. Pellentesque eget ornare tellus, ut gravida mi. Fusce vel lacinia lacus.","title":"Inline"},{"location":"specimen/#listing","text":"#!js hl_lines=\"8\" var _extends = function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { target[key] = source[key]; } } return target; };","title":"Listing"},{"location":"specimen/#horizontal-rules","text":"Aenean in finibus diam. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales.","title":"Horizontal rules"},{"location":"specimen/#data-tables","text":"Sollicitudo / Pellentesi consectetur adipiscing elit arcu sed Vivamus a pharetra yes yes yes yes yes Ornare viverra ex yes yes yes yes yes Mauris a ullamcorper yes yes partial yes yes Nullam urna elit yes yes yes yes yes Malesuada eget finibus yes yes yes yes yes Ullamcorper yes yes yes yes yes Vestibulum sodales yes - yes - yes Pulvinar nisl yes yes yes - - Pharetra aliquet est yes yes yes yes yes Sed suscipit yes yes yes yes yes Orci non pretium yes partial - - - Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero. Left Center Right Lorem dolor amet ipsum sit Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. Table with colgroups (Pandoc) Lorem ipsum dolor sit amet. Sed sagittis eleifend rutrum. Donec vitae suscipit est.","title":"Data tables"},{"location":"team/","text":"Harmony Team Ofir Attia Refael Oknin Stav Suisa","title":"Team"},{"location":"team/#harmony-team","text":"","title":"Harmony Team"},{"location":"extensions/admonition/","text":"Admonition Admonition is an extension included in the standard Markdown library that makes it possible to add block-styled side content to your documentation, for example summaries, notes, hints or warnings. Installation Add the following lines to your mkdocs.yml : markdown_extensions : - admonition Usage Admonition blocks follow a simple syntax: every block is started with !!! , followed by a single keyword which is used as the type qualifier of the block. The content of the block then follows on the next line, indented by four spaces. Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Changing the title By default, the block title will equal the type qualifier in titlecase. However, it can easily be changed by adding a quoted string after the type qualifier. Example: !!! note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Removing the title Similar to setting a custom title , the icon and title can be omitted by providing an empty string after the type qualifier: Example: !!! note \"\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Embedded code blocks Blocks can contain all kinds of text content, including headlines, lists, paragraphs and other blocks \u2013 except code blocks, because the parser from the standard Markdown library does not account for those. However, the PyMdown Extensions package adds an extension called SuperFences , which makes it possible to nest code blocks within other blocks. Example: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = '087652' ; Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. Types Admonition supports user-defined type qualifiers which may influence the style of the inserted block. Following is a list of type qualifiers supported by the Material theme, whereas the default type, and thus fallback for unknown type qualifiers, is note . Note Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: note seealso Summary Example: !!! summary Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Summary Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: summary tldr Tip Example: !!! tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: tip hint important Success Example: !!! success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: success check done Warning Example: !!! warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: warning caution attention Failure Example: !!! failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: failure fail missing Danger Example: !!! danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: danger error Bug Example: !!! bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: bug Quote Example: !!! quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: quote cite","title":"Admonition"},{"location":"extensions/admonition/#admonition","text":"Admonition is an extension included in the standard Markdown library that makes it possible to add block-styled side content to your documentation, for example summaries, notes, hints or warnings.","title":"Admonition"},{"location":"extensions/admonition/#installation","text":"Add the following lines to your mkdocs.yml : markdown_extensions : - admonition","title":"Installation"},{"location":"extensions/admonition/#usage","text":"Admonition blocks follow a simple syntax: every block is started with !!! , followed by a single keyword which is used as the type qualifier of the block. The content of the block then follows on the next line, indented by four spaces. Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Usage"},{"location":"extensions/admonition/#changing-the-title","text":"By default, the block title will equal the type qualifier in titlecase. However, it can easily be changed by adding a quoted string after the type qualifier. Example: !!! note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Changing the title"},{"location":"extensions/admonition/#removing-the-title","text":"Similar to setting a custom title , the icon and title can be omitted by providing an empty string after the type qualifier: Example: !!! note \"\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Removing the title"},{"location":"extensions/admonition/#embedded-code-blocks","text":"Blocks can contain all kinds of text content, including headlines, lists, paragraphs and other blocks \u2013 except code blocks, because the parser from the standard Markdown library does not account for those. However, the PyMdown Extensions package adds an extension called SuperFences , which makes it possible to nest code blocks within other blocks. Example: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = '087652' ; Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim.","title":"Embedded code blocks"},{"location":"extensions/admonition/#types","text":"Admonition supports user-defined type qualifiers which may influence the style of the inserted block. Following is a list of type qualifiers supported by the Material theme, whereas the default type, and thus fallback for unknown type qualifiers, is note .","title":"Types"},{"location":"extensions/admonition/#note","text":"Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: note seealso","title":"Note"},{"location":"extensions/admonition/#summary","text":"Example: !!! summary Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Summary Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: summary tldr","title":"Summary"},{"location":"extensions/admonition/#tip","text":"Example: !!! tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: tip hint important","title":"Tip"},{"location":"extensions/admonition/#success","text":"Example: !!! success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: success check done","title":"Success"},{"location":"extensions/admonition/#warning","text":"Example: !!! warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: warning caution attention","title":"Warning"},{"location":"extensions/admonition/#failure","text":"Example: !!! failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: failure fail missing","title":"Failure"},{"location":"extensions/admonition/#danger","text":"Example: !!! danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: danger error","title":"Danger"},{"location":"extensions/admonition/#bug","text":"Example: !!! bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: bug","title":"Bug"},{"location":"extensions/admonition/#quote","text":"Example: !!! quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: quote cite","title":"Quote"},{"location":"extensions/codehilite/","text":"CodeHilite CodeHilite is an extension that adds syntax highlighting to code blocks and is included in the standard Markdown library. The highlighting process is executed during compilation of the Markdown file. Syntax highlighting not working? Please ensure that Pygments is installed. See the next section for further directions on how to set up Pygments or use the official Docker image with all dependencies pre-installed. Installation CodeHilite parses code blocks and wraps them in pre tags. If Pygments is installed, which is a generic syntax highlighter with support for over 300 languages , CodeHilite will also highlight the code block. Pygments can be installed with the following command: pip install pygments To enable CodeHilite, add the following lines to your mkdocs.yml : markdown_extensions : - codehilite Migrating from Material 0.2.x In 0.2.x the CodeHilite extension was included with codehilite(css_class=code) which switched the CSS class from .codehilite to .code . The current version of the theme doesn't require that and defines styles for the default .codehilite class, so the part css_class=code needs to be removed. Usage Specifying the language The CodeHilite extension uses the same syntax as regular Markdown code blocks, but needs to know the language of the code block. This can be done in three different ways. via Markdown syntax recommended In Markdown, code blocks can be opened and closed by writing three backticks on separate lines. To add code highlighting to those blocks, the easiest way is to specify the language directly after the opening block. Example: ``` python import tensorflow as tf ``` Result: import tensorflow as tf via Shebang Alternatively, if the first line of a code block contains a shebang, the language is derived from the path referenced in the shebang. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: #!/usr/bin/python import tensorflow as tf Result: #!/usr/bin/python import tensorflow as tf via three colons If the first line starts with three colons followed by a language identifier, the first line is stripped. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: :::python import tensorflow as tf Result: :::python import tensorflow as tf Adding line numbers Line numbers can be added by enabling the linenums flag in your mkdocs.yml : markdown_extensions : - codehilite(linenums=true) Example: ``` python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: #!python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] Highlighting specific lines Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language identifier. Line counts start at 1. Example: ``` python hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: #!python hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] Supported languages excerpt CodeHilite uses Pygments , a generic syntax highlighter with support for over 300 languages , so the following list of examples is just an excerpt. Bash #!/bin/bash for OPT in \" $@ \" do case \" $OPT \" in '-f' ) canonicalize = 1 ;; '-n' ) switchlf = \"-n\" ;; esac done # readlink -f function __readlink_f { target = \" $1 \" while test -n \" $target \" ; do filepath = \" $target \" cd ` dirname \" $filepath \" ` target = ` readlink \" $filepath \" ` done /bin/echo $switchlf ` pwd -P ` / ` basename \" $filepath \" ` } if [ ! \" $canonicalize \" ] ; then readlink $switchlf \" $@ \" else for file in \" $@ \" do case \" $file \" in -* ) ;; * ) __readlink_f \" $file \" ;; esac done fi exit $? C extern size_t pb_varint_scan ( const uint8_t data [], size_t left ) { assert ( data && left ); left = left > 10 ? 10 : left ; #ifdef __SSE2__ /* Mapping: remaining bytes ==> bitmask */ static const int mask_map [] = { 0x0000 , 0x0001 , 0x0003 , 0x0007 , 0x000F , 0x001F , 0x003F , 0x007F , 0x00FF , 0x01FF , 0x03FF }; /* Load buffer into 128-bit integer and create high-bit mask */ __m128i temp = _mm_loadu_si128 (( const __m128i * ) data ); __m128i high = _mm_set1_epi8 ( 0x80 ); /* Intersect and extract mask with high-bits set */ int mask = _mm_movemask_epi8 ( _mm_and_si128 ( temp , high )); mask = ( mask & mask_map [ left ]) ^ mask_map [ left ]; /* Count trailing zeroes */ return mask ? __builtin_ctz ( mask ) + 1 : 0 ; #else /* Linear scan */ size_t size = 0 ; while ( data [ size ++ ] & 0x80 ) if ( !-- left ) return 0 ; return size ; #endif /* __SSE2__ */ } C++ Extension :: Extension ( const Descriptor * descriptor , const Descriptor * scope ) : descriptor_ ( descriptor ), scope_ ( scope ) { /* Extract full name for signature */ variables_ [ \"signature\" ] = descriptor_ -> full_name (); /* Prepare message symbol */ variables_ [ \"message\" ] = StringReplace ( variables_ [ \"signature\" ], \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"message\" ])); /* Suffix scope to identifiers, if given */ string suffix ( \"\" ); if ( scope_ ) { suffix = scope_ -> full_name (); /* Check if the base and extension types are in the same package */ if ( ! scope_ -> file () -> package (). compare ( descriptor_ -> file () -> package ())) suffix = StripPrefixString ( suffix , scope_ -> file () -> package () + \".\" ); /* Append to signature */ variables_ [ \"signature\" ] += \".[\" + suffix + \"]\" ; suffix = \"_\" + suffix ; } /* Prepare extension symbol */ variables_ [ \"extension\" ] = StringReplace ( suffix , \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"extension\" ])); } C# public static void Send ( Socket socket , byte [] buffer , int offset , int size , int timeout ) { int startTickCount = Environment . TickCount ; int sent = 0 ; do { if ( Environment . TickCount > startTickCount + timeout ) throw new Exception ( \"Timeout.\" ); try { sent += socket . Send ( buffer , offset + sent , size - sent , SocketFlags . None ); } catch ( SocketException ex ) { if ( ex . SocketErrorCode == SocketError . WouldBlock || ex . SocketErrorCode == SocketError . IOPending || ex . SocketErrorCode == SocketError . NoBufferSpaceAvailable ) { /* Socket buffer is probably full, wait and try again */ Thread . Sleep ( 30 ); } else { throw ex ; } } } while ( sent < size ); } Clojure ( clojure-version ) ( defn partition-when [ f ] ( fn [ rf ] ( let [ a ( java.util.ArrayList. ) fval ( volatile! false )] ( fn ([] ( rf )) ([ result ] ( let [ result ( if ( .isEmpty a ) result ( let [ v ( vec ( .toArray a ))] ;; Clear first ( .clear a ) ( unreduced ( rf result v ))))] ( rf result ))) ([ result input ] ( if-not ( and ( f input ) @ fval ) ( do ( vreset! fval true ) ( .add a input ) result ) ( let [ v ( vec ( .toArray a ))] ( .clear a ) ( let [ ret ( rf result v )] ( when-not ( reduced? ret ) ( .add a input )) ret )))))))) ( into [] ( partition-when # ( .startsWith % \">>\" )) [ \"1d\" \"33\" \">> 1\" \">> 2\" \"22\" \">> 3\" ]) Diff Index: grunt.js =================================================================== --- grunt.js (revision 31200) +++ grunt.js (working copy) @@ -12,6 +12,7 @@ module.exports = function (grunt) { + console.log('hello world'); // Project configuration. grunt.initConfig({ lint: { @@ -19,10 +20,6 @@ 'packages/services.web/{!(test)/**/,}*.js', 'packages/error/**/*.js' ], - scripts: [ - 'grunt.js', - 'db/**/*.js' - ], browser: [ 'packages/web/server.js', 'packages/web/server/**/*.js', Docker FROM ubuntu # Install vnc, xvfb in order to create a 'fake' display and firefox RUN apt-get update && apt-get install -y x11vnc xvfb firefox RUN mkdir ~/.vnc # Setup a password RUN x11vnc -storepasswd 1234 ~/.vnc/passwd # Autostart firefox (might not be the best way, but it does the trick) RUN bash -c 'echo \"firefox\" >> /.bashrc' EXPOSE 5900 CMD [ \"x11vnc\" , \"-forever\" , \"-usepw\" , \"-create\" ] Elixir require Logger def accept ( port ) do { :ok , socket } = :gen_tcp . listen ( port , [ :binary , packet : :line , active : false , reuseaddr : true ]) Logger . info \"Accepting connections on port #{ port } \" loop_acceptor ( socket ) end defp loop_acceptor ( socket ) do { :ok , client } = :gen_tcp . accept ( socket ) serve ( client ) loop_acceptor ( socket ) end defp serve ( socket ) do socket |> read_line () |> write_line ( socket ) serve ( socket ) end defp read_line ( socket ) do { :ok , data } = :gen_tcp . recv ( socket , 0 ) data end defp write_line ( line , socket ) do :gen_tcp . send ( socket , line ) end Erlang circular ( Defs ) -> [ { { Type , Base }, Fields } || { { Type , Base }, Fields } <- Defs , Type == msg , circular ( Base , Defs ) ]. circular ( Base , Defs ) -> Fields = proplists : get_value ({ msg , Base }, Defs ), circular ( Defs , Fields , [ Base ]). circular (_ Defs , [], _ Path ) -> false ; circular ( Defs , [ Field | Fields ], Path ) -> case Field #field.type of { msg , Type } -> case lists : member ( Type , Path ) of false -> Children = proplists : get_value ({ msg , Type }, Defs ), case circular ( Defs , Children , [ Type | Path ]) of false -> circular ( Defs , Fields , Path ); true -> true end ; true -> Type == lists : last ( Path ) andalso ( length ( Path ) == 1 orelse not is_tree ( Path )) end ; _ -> circular ( Defs , Fields , Path ) end . F# /// Asynchronously download retangles from the server /// and decode the JSON format to F# Rectangle record let [< Js >] getRectangles () : Async < Rectangle [] > = async { let req = XMLHttpRequest () req . Open ( \"POST\" , \"/get\" , true ) let! resp = req . AsyncSend () return JSON . parse ( resp ) } /// Repeatedly update rectangles after 0.5 sec let [< Js >] updateLoop () = async { while true do do ! Async . Sleep ( 500 ) let! rects = getRectangles () cleanRectangles () rects |> Array . iter createRectangle } Go package main import \"fmt\" func counter ( id int , channel chan int , closer bool ) { for i := 0 ; i < 10000000 ; i ++ { fmt . Println ( \"process\" , id , \" send\" , i ) channel <- 1 } if closer { close ( channel ) } } func main () { channel := make ( chan int ) go counter ( 1 , channel , false ) go counter ( 2 , channel , true ) x := 0 // receiving data from channel for i := range channel { fmt . Println ( \"receiving\" ) x += i } fmt . Println ( x ) } HTML <!doctype html> < html class = \"no-js\" lang = \"\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"x-ua-compatible\" content = \"ie=edge\" > < title > HTML5 Boilerplate </ title > < meta name = \"description\" content = \"\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"apple-touch-icon\" href = \"apple-touch-icon.png\" > < link rel = \"stylesheet\" href = \"css/normalize.css\" > < link rel = \"stylesheet\" href = \"css/main.css\" > < script src = \"js/vendor/modernizr-2.8.3.min.js\" ></ script > </ head > < body > < p > Hello world! This is HTML5 Boilerplate. </ p > </ body > </ html > Java import java.util.LinkedList ; import java.lang.reflect.Array ; public class UnsortedHashSet < E > { private static final double LOAD_FACTOR_LIMIT = 0.7 ; private int size ; private LinkedList < E >[] con ; public UnsortedHashSet () { con = ( LinkedList < E >[] )( new LinkedList [ 10 ] ); } public boolean add ( E obj ) { int oldSize = size ; int index = Math . abs ( obj . hashCode ()) % con . length ; if ( con [ index ] == null ) con [ index ] = new LinkedList < E > (); if ( ! con [ index ] . contains ( obj )) { con [ index ] . add ( obj ); size ++ ; } if ( 1.0 * size / con . length > LOAD_FACTOR_LIMIT ) resize (); return oldSize != size ; } private void resize () { UnsortedHashSet < E > temp = new UnsortedHashSet < E > (); temp . con = ( LinkedList < E >[] )( new LinkedList [ con . length * 2 + 1 ] ); for ( int i = 0 ; i < con . length ; i ++ ) { if ( con [ i ] != null ) for ( E e : con [ i ] ) temp . add ( e ); } con = temp . con ; } public int size () { return size ; } } JavaScript var Math = require ( 'lib/math' ); var _extends = function ( target ) { for ( var i = 1 ; i < arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; var e = exports . e = 2.71828182846 ; exports [ 'default' ] = function ( x ) { return Math . exp ( x ); }; module . exports = _extends ( exports [ 'default' ], exports ); JSON { \"name\" : \"mkdocs-material\" , \"version\" : \"0.2.4\" , \"description\" : \"A Material Design theme for MkDocs\" , \"homepage\" : \"http://squidfunk.github.io/mkdocs-material/\" , \"authors\" : [ \"squidfunk <martin.donath@squidfunk.com>\" ], \"license\" : \"MIT\" , \"main\" : \"Gulpfile.js\" , \"scripts\" : { \"start\" : \"./node_modules/.bin/gulp watch --mkdocs\" , \"build\" : \"./node_modules/.bin/gulp build --production\" } ... } Julia using MXNet mlp = @mx . chain mx . Variable ( : data ) => mx . FullyConnected ( name =: fc1 , num_hidden = 128 ) => mx . Activation ( name =: relu1 , act_type =: relu ) => mx . FullyConnected ( name =: fc2 , num_hidden = 64 ) => mx . Activation ( name =: relu2 , act_type =: relu ) => mx . FullyConnected ( name =: fc3 , num_hidden = 10 ) => mx . SoftmaxOutput ( name =: softmax ) # data provider batch_size = 100 include ( Pkg . dir ( \"MXNet\" , \"examples\" , \"mnist\" , \"mnist-data.jl\" )) train_provider , eval_provider = get_mnist_providers ( batch_size ) # setup model model = mx . FeedForward ( mlp , context = mx . cpu ()) # optimization algorithm optimizer = mx . SGD ( lr = 0.1 , momentum = 0.9 ) # fit parameters mx . fit ( model , optimizer , train_provider , n_epoch = 20 , eval_data = eval_provider ) Lua local ffi = require ( \"ffi\" ) ffi . cdef [[ void Sleep(int ms); int poll(struct pollfd *fds, unsigned long nfds, int timeout); ]] local sleep if ffi . os == \"Windows\" then function sleep ( s ) ffi . C . Sleep ( s * 1000 ) end else function sleep ( s ) ffi . C . poll ( nil , 0 , s * 1000 ) end end for i = 1 , 160 do io.write ( \".\" ); io.flush () sleep ( 0.01 ) end io.write ( \" \\n \" ) MySQL SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = '087652' ; PHP <?php // src/AppBundle/Controller/LuckyController.php namespace AppBundle\\Controller ; use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route ; use Symfony\\Component\\HttpFoundation\\Response ; class LuckyController { /** * @Route(\"/lucky/number\") */ public function numberAction () { $number = mt_rand ( 0 , 100 ); return new Response ( '<html><body>Lucky number: ' . $number . '</body></html>' ); } } Protocol Buffers syntax = \"proto2\" ; package caffe ; // Specifies the shape (dimensions) of a Blob. message BlobShape { repeated int64 dim = 1 [ packed = true ]; } message BlobProto { optional BlobShape shape = 7 ; repeated float data = 5 [ packed = true ]; repeated float diff = 6 [ packed = true ]; // 4D dimensions -- deprecated. Use \"shape\" instead. optional int32 num = 1 [ default = 0 ]; optional int32 channels = 2 [ default = 0 ]; optional int32 height = 3 [ default = 0 ]; optional int32 width = 4 [ default = 0 ]; } Python \"\"\" A very simple MNIST classifier. See extensive documentation at http://tensorflow.org/tutorials/mnist/beginners/index.md \"\"\" from __future__ import absolute_import from __future__ import division from __future__ import print_function # Import data from tensorflow.examples.tutorials.mnist import input_data import tensorflow as tf flags = tf . app . flags FLAGS = flags . FLAGS flags . DEFINE_string ( 'data_dir' , '/tmp/data/' , 'Directory for storing data' ) mnist = input_data . read_data_sets ( FLAGS . data_dir , one_hot = True ) sess = tf . InteractiveSession () # Create the model x = tf . placeholder ( tf . float32 , [ None , 784 ]) W = tf . Variable ( tf . zeros ([ 784 , 10 ])) b = tf . Variable ( tf . zeros ([ 10 ])) y = tf . nn . softmax ( tf . matmul ( x , W ) + b ) Ruby require 'finity/event' require 'finity/machine' require 'finity/state' require 'finity/transition' require 'finity/version' module Finity class InvalidCallback < StandardError ; end class MissingCallback < StandardError ; end class InvalidState < StandardError ; end # Class methods to be injected into the including class upon inclusion. module ClassMethods # Instantiate a new state machine for the including class by accepting a # block with state and event (and subsequent transition) definitions. def finity options = {}, & block @finity ||= Machine . new self , options , & block end # Return the names of all registered states. def states @finity . states . map { | name , _ | name } end # Return the names of all registered events. def events @finity . events . map { | name , _ | name } end end # Inject methods into the including class upon inclusion. def self . included base base . extend ClassMethods end end XML <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE mainTag SYSTEM \"some.dtd\" [ENTITY % entity]> <?oxygen RNGSchema=\"some.rng\" type=\"xml\"?> <xs:main-Tag xmlns:xs= \"http://www.w3.org/2001/XMLSchema\" > <!-- This is a sample comment --> <childTag attribute= \"Quoted Value\" another-attribute= 'Single quoted value' a-third-attribute= '123' > <withTextContent> Some text content </withTextContent> <withEntityContent> Some text content with &lt; entities &gt; and mentioning uint8_t and int32_t </withEntityContent> <otherTag attribute= 'Single quoted Value' /> </childTag> <![CDATA[ some CData ]]> </main-Tag>","title":"CodeHilite"},{"location":"extensions/codehilite/#codehilite","text":"CodeHilite is an extension that adds syntax highlighting to code blocks and is included in the standard Markdown library. The highlighting process is executed during compilation of the Markdown file. Syntax highlighting not working? Please ensure that Pygments is installed. See the next section for further directions on how to set up Pygments or use the official Docker image with all dependencies pre-installed.","title":"CodeHilite"},{"location":"extensions/codehilite/#installation","text":"CodeHilite parses code blocks and wraps them in pre tags. If Pygments is installed, which is a generic syntax highlighter with support for over 300 languages , CodeHilite will also highlight the code block. Pygments can be installed with the following command: pip install pygments To enable CodeHilite, add the following lines to your mkdocs.yml : markdown_extensions : - codehilite Migrating from Material 0.2.x In 0.2.x the CodeHilite extension was included with codehilite(css_class=code) which switched the CSS class from .codehilite to .code . The current version of the theme doesn't require that and defines styles for the default .codehilite class, so the part css_class=code needs to be removed.","title":"Installation"},{"location":"extensions/codehilite/#usage","text":"","title":"Usage"},{"location":"extensions/codehilite/#specifying-the-language","text":"The CodeHilite extension uses the same syntax as regular Markdown code blocks, but needs to know the language of the code block. This can be done in three different ways.","title":"Specifying the language"},{"location":"extensions/codehilite/#via-markdown-syntax-recommended","text":"In Markdown, code blocks can be opened and closed by writing three backticks on separate lines. To add code highlighting to those blocks, the easiest way is to specify the language directly after the opening block. Example: ``` python import tensorflow as tf ``` Result: import tensorflow as tf","title":"via Markdown syntax recommended"},{"location":"extensions/codehilite/#via-shebang","text":"Alternatively, if the first line of a code block contains a shebang, the language is derived from the path referenced in the shebang. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: #!/usr/bin/python import tensorflow as tf Result: #!/usr/bin/python import tensorflow as tf","title":"via Shebang"},{"location":"extensions/codehilite/#via-three-colons","text":"If the first line starts with three colons followed by a language identifier, the first line is stripped. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: :::python import tensorflow as tf Result: :::python import tensorflow as tf","title":"via three colons"},{"location":"extensions/codehilite/#adding-line-numbers","text":"Line numbers can be added by enabling the linenums flag in your mkdocs.yml : markdown_extensions : - codehilite(linenums=true) Example: ``` python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: #!python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j]","title":"Adding line numbers"},{"location":"extensions/codehilite/#highlighting-specific-lines","text":"Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language identifier. Line counts start at 1. Example: ``` python hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: #!python hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j]","title":"Highlighting specific lines"},{"location":"extensions/codehilite/#supported-languages-excerpt","text":"CodeHilite uses Pygments , a generic syntax highlighter with support for over 300 languages , so the following list of examples is just an excerpt.","title":"Supported languages excerpt"},{"location":"extensions/codehilite/#bash","text":"#!/bin/bash for OPT in \" $@ \" do case \" $OPT \" in '-f' ) canonicalize = 1 ;; '-n' ) switchlf = \"-n\" ;; esac done # readlink -f function __readlink_f { target = \" $1 \" while test -n \" $target \" ; do filepath = \" $target \" cd ` dirname \" $filepath \" ` target = ` readlink \" $filepath \" ` done /bin/echo $switchlf ` pwd -P ` / ` basename \" $filepath \" ` } if [ ! \" $canonicalize \" ] ; then readlink $switchlf \" $@ \" else for file in \" $@ \" do case \" $file \" in -* ) ;; * ) __readlink_f \" $file \" ;; esac done fi exit $?","title":"Bash"},{"location":"extensions/codehilite/#c","text":"extern size_t pb_varint_scan ( const uint8_t data [], size_t left ) { assert ( data && left ); left = left > 10 ? 10 : left ; #ifdef __SSE2__ /* Mapping: remaining bytes ==> bitmask */ static const int mask_map [] = { 0x0000 , 0x0001 , 0x0003 , 0x0007 , 0x000F , 0x001F , 0x003F , 0x007F , 0x00FF , 0x01FF , 0x03FF }; /* Load buffer into 128-bit integer and create high-bit mask */ __m128i temp = _mm_loadu_si128 (( const __m128i * ) data ); __m128i high = _mm_set1_epi8 ( 0x80 ); /* Intersect and extract mask with high-bits set */ int mask = _mm_movemask_epi8 ( _mm_and_si128 ( temp , high )); mask = ( mask & mask_map [ left ]) ^ mask_map [ left ]; /* Count trailing zeroes */ return mask ? __builtin_ctz ( mask ) + 1 : 0 ; #else /* Linear scan */ size_t size = 0 ; while ( data [ size ++ ] & 0x80 ) if ( !-- left ) return 0 ; return size ; #endif /* __SSE2__ */ }","title":"C"},{"location":"extensions/codehilite/#c_1","text":"Extension :: Extension ( const Descriptor * descriptor , const Descriptor * scope ) : descriptor_ ( descriptor ), scope_ ( scope ) { /* Extract full name for signature */ variables_ [ \"signature\" ] = descriptor_ -> full_name (); /* Prepare message symbol */ variables_ [ \"message\" ] = StringReplace ( variables_ [ \"signature\" ], \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"message\" ])); /* Suffix scope to identifiers, if given */ string suffix ( \"\" ); if ( scope_ ) { suffix = scope_ -> full_name (); /* Check if the base and extension types are in the same package */ if ( ! scope_ -> file () -> package (). compare ( descriptor_ -> file () -> package ())) suffix = StripPrefixString ( suffix , scope_ -> file () -> package () + \".\" ); /* Append to signature */ variables_ [ \"signature\" ] += \".[\" + suffix + \"]\" ; suffix = \"_\" + suffix ; } /* Prepare extension symbol */ variables_ [ \"extension\" ] = StringReplace ( suffix , \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"extension\" ])); }","title":"C++"},{"location":"extensions/codehilite/#c_2","text":"public static void Send ( Socket socket , byte [] buffer , int offset , int size , int timeout ) { int startTickCount = Environment . TickCount ; int sent = 0 ; do { if ( Environment . TickCount > startTickCount + timeout ) throw new Exception ( \"Timeout.\" ); try { sent += socket . Send ( buffer , offset + sent , size - sent , SocketFlags . None ); } catch ( SocketException ex ) { if ( ex . SocketErrorCode == SocketError . WouldBlock || ex . SocketErrorCode == SocketError . IOPending || ex . SocketErrorCode == SocketError . NoBufferSpaceAvailable ) { /* Socket buffer is probably full, wait and try again */ Thread . Sleep ( 30 ); } else { throw ex ; } } } while ( sent < size ); }","title":"C&#35;"},{"location":"extensions/codehilite/#clojure","text":"( clojure-version ) ( defn partition-when [ f ] ( fn [ rf ] ( let [ a ( java.util.ArrayList. ) fval ( volatile! false )] ( fn ([] ( rf )) ([ result ] ( let [ result ( if ( .isEmpty a ) result ( let [ v ( vec ( .toArray a ))] ;; Clear first ( .clear a ) ( unreduced ( rf result v ))))] ( rf result ))) ([ result input ] ( if-not ( and ( f input ) @ fval ) ( do ( vreset! fval true ) ( .add a input ) result ) ( let [ v ( vec ( .toArray a ))] ( .clear a ) ( let [ ret ( rf result v )] ( when-not ( reduced? ret ) ( .add a input )) ret )))))))) ( into [] ( partition-when # ( .startsWith % \">>\" )) [ \"1d\" \"33\" \">> 1\" \">> 2\" \"22\" \">> 3\" ])","title":"Clojure"},{"location":"extensions/codehilite/#diff","text":"Index: grunt.js =================================================================== --- grunt.js (revision 31200) +++ grunt.js (working copy) @@ -12,6 +12,7 @@ module.exports = function (grunt) { + console.log('hello world'); // Project configuration. grunt.initConfig({ lint: { @@ -19,10 +20,6 @@ 'packages/services.web/{!(test)/**/,}*.js', 'packages/error/**/*.js' ], - scripts: [ - 'grunt.js', - 'db/**/*.js' - ], browser: [ 'packages/web/server.js', 'packages/web/server/**/*.js',","title":"Diff"},{"location":"extensions/codehilite/#docker","text":"FROM ubuntu # Install vnc, xvfb in order to create a 'fake' display and firefox RUN apt-get update && apt-get install -y x11vnc xvfb firefox RUN mkdir ~/.vnc # Setup a password RUN x11vnc -storepasswd 1234 ~/.vnc/passwd # Autostart firefox (might not be the best way, but it does the trick) RUN bash -c 'echo \"firefox\" >> /.bashrc' EXPOSE 5900 CMD [ \"x11vnc\" , \"-forever\" , \"-usepw\" , \"-create\" ]","title":"Docker"},{"location":"extensions/codehilite/#elixir","text":"require Logger def accept ( port ) do { :ok , socket } = :gen_tcp . listen ( port , [ :binary , packet : :line , active : false , reuseaddr : true ]) Logger . info \"Accepting connections on port #{ port } \" loop_acceptor ( socket ) end defp loop_acceptor ( socket ) do { :ok , client } = :gen_tcp . accept ( socket ) serve ( client ) loop_acceptor ( socket ) end defp serve ( socket ) do socket |> read_line () |> write_line ( socket ) serve ( socket ) end defp read_line ( socket ) do { :ok , data } = :gen_tcp . recv ( socket , 0 ) data end defp write_line ( line , socket ) do :gen_tcp . send ( socket , line ) end","title":"Elixir"},{"location":"extensions/codehilite/#erlang","text":"circular ( Defs ) -> [ { { Type , Base }, Fields } || { { Type , Base }, Fields } <- Defs , Type == msg , circular ( Base , Defs ) ]. circular ( Base , Defs ) -> Fields = proplists : get_value ({ msg , Base }, Defs ), circular ( Defs , Fields , [ Base ]). circular (_ Defs , [], _ Path ) -> false ; circular ( Defs , [ Field | Fields ], Path ) -> case Field #field.type of { msg , Type } -> case lists : member ( Type , Path ) of false -> Children = proplists : get_value ({ msg , Type }, Defs ), case circular ( Defs , Children , [ Type | Path ]) of false -> circular ( Defs , Fields , Path ); true -> true end ; true -> Type == lists : last ( Path ) andalso ( length ( Path ) == 1 orelse not is_tree ( Path )) end ; _ -> circular ( Defs , Fields , Path ) end .","title":"Erlang"},{"location":"extensions/codehilite/#f","text":"/// Asynchronously download retangles from the server /// and decode the JSON format to F# Rectangle record let [< Js >] getRectangles () : Async < Rectangle [] > = async { let req = XMLHttpRequest () req . Open ( \"POST\" , \"/get\" , true ) let! resp = req . AsyncSend () return JSON . parse ( resp ) } /// Repeatedly update rectangles after 0.5 sec let [< Js >] updateLoop () = async { while true do do ! Async . Sleep ( 500 ) let! rects = getRectangles () cleanRectangles () rects |> Array . iter createRectangle }","title":"F&#35;"},{"location":"extensions/codehilite/#go","text":"package main import \"fmt\" func counter ( id int , channel chan int , closer bool ) { for i := 0 ; i < 10000000 ; i ++ { fmt . Println ( \"process\" , id , \" send\" , i ) channel <- 1 } if closer { close ( channel ) } } func main () { channel := make ( chan int ) go counter ( 1 , channel , false ) go counter ( 2 , channel , true ) x := 0 // receiving data from channel for i := range channel { fmt . Println ( \"receiving\" ) x += i } fmt . Println ( x ) }","title":"Go"},{"location":"extensions/codehilite/#html","text":"<!doctype html> < html class = \"no-js\" lang = \"\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"x-ua-compatible\" content = \"ie=edge\" > < title > HTML5 Boilerplate </ title > < meta name = \"description\" content = \"\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"apple-touch-icon\" href = \"apple-touch-icon.png\" > < link rel = \"stylesheet\" href = \"css/normalize.css\" > < link rel = \"stylesheet\" href = \"css/main.css\" > < script src = \"js/vendor/modernizr-2.8.3.min.js\" ></ script > </ head > < body > < p > Hello world! This is HTML5 Boilerplate. </ p > </ body > </ html >","title":"HTML"},{"location":"extensions/codehilite/#java","text":"import java.util.LinkedList ; import java.lang.reflect.Array ; public class UnsortedHashSet < E > { private static final double LOAD_FACTOR_LIMIT = 0.7 ; private int size ; private LinkedList < E >[] con ; public UnsortedHashSet () { con = ( LinkedList < E >[] )( new LinkedList [ 10 ] ); } public boolean add ( E obj ) { int oldSize = size ; int index = Math . abs ( obj . hashCode ()) % con . length ; if ( con [ index ] == null ) con [ index ] = new LinkedList < E > (); if ( ! con [ index ] . contains ( obj )) { con [ index ] . add ( obj ); size ++ ; } if ( 1.0 * size / con . length > LOAD_FACTOR_LIMIT ) resize (); return oldSize != size ; } private void resize () { UnsortedHashSet < E > temp = new UnsortedHashSet < E > (); temp . con = ( LinkedList < E >[] )( new LinkedList [ con . length * 2 + 1 ] ); for ( int i = 0 ; i < con . length ; i ++ ) { if ( con [ i ] != null ) for ( E e : con [ i ] ) temp . add ( e ); } con = temp . con ; } public int size () { return size ; } }","title":"Java"},{"location":"extensions/codehilite/#javascript","text":"var Math = require ( 'lib/math' ); var _extends = function ( target ) { for ( var i = 1 ; i < arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; var e = exports . e = 2.71828182846 ; exports [ 'default' ] = function ( x ) { return Math . exp ( x ); }; module . exports = _extends ( exports [ 'default' ], exports );","title":"JavaScript"},{"location":"extensions/codehilite/#json","text":"{ \"name\" : \"mkdocs-material\" , \"version\" : \"0.2.4\" , \"description\" : \"A Material Design theme for MkDocs\" , \"homepage\" : \"http://squidfunk.github.io/mkdocs-material/\" , \"authors\" : [ \"squidfunk <martin.donath@squidfunk.com>\" ], \"license\" : \"MIT\" , \"main\" : \"Gulpfile.js\" , \"scripts\" : { \"start\" : \"./node_modules/.bin/gulp watch --mkdocs\" , \"build\" : \"./node_modules/.bin/gulp build --production\" } ... }","title":"JSON"},{"location":"extensions/codehilite/#julia","text":"using MXNet mlp = @mx . chain mx . Variable ( : data ) => mx . FullyConnected ( name =: fc1 , num_hidden = 128 ) => mx . Activation ( name =: relu1 , act_type =: relu ) => mx . FullyConnected ( name =: fc2 , num_hidden = 64 ) => mx . Activation ( name =: relu2 , act_type =: relu ) => mx . FullyConnected ( name =: fc3 , num_hidden = 10 ) => mx . SoftmaxOutput ( name =: softmax ) # data provider batch_size = 100 include ( Pkg . dir ( \"MXNet\" , \"examples\" , \"mnist\" , \"mnist-data.jl\" )) train_provider , eval_provider = get_mnist_providers ( batch_size ) # setup model model = mx . FeedForward ( mlp , context = mx . cpu ()) # optimization algorithm optimizer = mx . SGD ( lr = 0.1 , momentum = 0.9 ) # fit parameters mx . fit ( model , optimizer , train_provider , n_epoch = 20 , eval_data = eval_provider )","title":"Julia"},{"location":"extensions/codehilite/#lua","text":"local ffi = require ( \"ffi\" ) ffi . cdef [[ void Sleep(int ms); int poll(struct pollfd *fds, unsigned long nfds, int timeout); ]] local sleep if ffi . os == \"Windows\" then function sleep ( s ) ffi . C . Sleep ( s * 1000 ) end else function sleep ( s ) ffi . C . poll ( nil , 0 , s * 1000 ) end end for i = 1 , 160 do io.write ( \".\" ); io.flush () sleep ( 0.01 ) end io.write ( \" \\n \" )","title":"Lua"},{"location":"extensions/codehilite/#mysql","text":"SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = '087652' ;","title":"MySQL"},{"location":"extensions/codehilite/#php","text":"<?php // src/AppBundle/Controller/LuckyController.php namespace AppBundle\\Controller ; use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route ; use Symfony\\Component\\HttpFoundation\\Response ; class LuckyController { /** * @Route(\"/lucky/number\") */ public function numberAction () { $number = mt_rand ( 0 , 100 ); return new Response ( '<html><body>Lucky number: ' . $number . '</body></html>' ); } }","title":"PHP"},{"location":"extensions/codehilite/#protocol-buffers","text":"syntax = \"proto2\" ; package caffe ; // Specifies the shape (dimensions) of a Blob. message BlobShape { repeated int64 dim = 1 [ packed = true ]; } message BlobProto { optional BlobShape shape = 7 ; repeated float data = 5 [ packed = true ]; repeated float diff = 6 [ packed = true ]; // 4D dimensions -- deprecated. Use \"shape\" instead. optional int32 num = 1 [ default = 0 ]; optional int32 channels = 2 [ default = 0 ]; optional int32 height = 3 [ default = 0 ]; optional int32 width = 4 [ default = 0 ]; }","title":"Protocol Buffers"},{"location":"extensions/codehilite/#python","text":"\"\"\" A very simple MNIST classifier. See extensive documentation at http://tensorflow.org/tutorials/mnist/beginners/index.md \"\"\" from __future__ import absolute_import from __future__ import division from __future__ import print_function # Import data from tensorflow.examples.tutorials.mnist import input_data import tensorflow as tf flags = tf . app . flags FLAGS = flags . FLAGS flags . DEFINE_string ( 'data_dir' , '/tmp/data/' , 'Directory for storing data' ) mnist = input_data . read_data_sets ( FLAGS . data_dir , one_hot = True ) sess = tf . InteractiveSession () # Create the model x = tf . placeholder ( tf . float32 , [ None , 784 ]) W = tf . Variable ( tf . zeros ([ 784 , 10 ])) b = tf . Variable ( tf . zeros ([ 10 ])) y = tf . nn . softmax ( tf . matmul ( x , W ) + b )","title":"Python"},{"location":"extensions/codehilite/#ruby","text":"require 'finity/event' require 'finity/machine' require 'finity/state' require 'finity/transition' require 'finity/version' module Finity class InvalidCallback < StandardError ; end class MissingCallback < StandardError ; end class InvalidState < StandardError ; end # Class methods to be injected into the including class upon inclusion. module ClassMethods # Instantiate a new state machine for the including class by accepting a # block with state and event (and subsequent transition) definitions. def finity options = {}, & block @finity ||= Machine . new self , options , & block end # Return the names of all registered states. def states @finity . states . map { | name , _ | name } end # Return the names of all registered events. def events @finity . events . map { | name , _ | name } end end # Inject methods into the including class upon inclusion. def self . included base base . extend ClassMethods end end","title":"Ruby"},{"location":"extensions/codehilite/#xml","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE mainTag SYSTEM \"some.dtd\" [ENTITY % entity]> <?oxygen RNGSchema=\"some.rng\" type=\"xml\"?> <xs:main-Tag xmlns:xs= \"http://www.w3.org/2001/XMLSchema\" > <!-- This is a sample comment --> <childTag attribute= \"Quoted Value\" another-attribute= 'Single quoted value' a-third-attribute= '123' > <withTextContent> Some text content </withTextContent> <withEntityContent> Some text content with &lt; entities &gt; and mentioning uint8_t and int32_t </withEntityContent> <otherTag attribute= 'Single quoted Value' /> </childTag> <![CDATA[ some CData ]]> </main-Tag>","title":"XML"},{"location":"extensions/footnotes/","text":"Footnotes Footnotes is another extension included in the standard Markdown library. As the name says, it adds the ability to add footnotes to your documentation. Installation Add the following lines to your mkdocs.yml : markdown_extensions : - footnotes Usage The markup for footnotes is similar to the standard Markdown markup for links. A reference is inserted in the text, which can then be defined at any point in the document. Inserting the reference The footnote reference is enclosed in square brackets and starts with a caret, followed by an arbitrary label which may contain numeric identifiers [1, 2, 3, ...] or names [Granovetter et al. 1998]. The rendered references are always consecutive superscripted numbers. Example: Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] Result: Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit. ^2 Inserting the content The footnote content is also declared with a label, which must match the label used for the footnote reference. It can be inserted at an arbitrary position in the document and is always rendered at the bottom of the page. Furthermore, a backlink is automatically added to the footnote reference. on a single line Short statements can be written on the same line. Example: [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Result: Jump to footnote at the bottom of the page [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. on multiple lines Paragraphs should be written on the next line. As with all Markdown blocks, the content must be indented by four spaces. Example: [^2]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Jump to footnote at the bottom of the page","title":"Footnotes"},{"location":"extensions/footnotes/#footnotes","text":"Footnotes is another extension included in the standard Markdown library. As the name says, it adds the ability to add footnotes to your documentation.","title":"Footnotes"},{"location":"extensions/footnotes/#installation","text":"Add the following lines to your mkdocs.yml : markdown_extensions : - footnotes","title":"Installation"},{"location":"extensions/footnotes/#usage","text":"The markup for footnotes is similar to the standard Markdown markup for links. A reference is inserted in the text, which can then be defined at any point in the document.","title":"Usage"},{"location":"extensions/footnotes/#inserting-the-reference","text":"The footnote reference is enclosed in square brackets and starts with a caret, followed by an arbitrary label which may contain numeric identifiers [1, 2, 3, ...] or names [Granovetter et al. 1998]. The rendered references are always consecutive superscripted numbers. Example: Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] Result: Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit. ^2","title":"Inserting the reference"},{"location":"extensions/footnotes/#inserting-the-content","text":"The footnote content is also declared with a label, which must match the label used for the footnote reference. It can be inserted at an arbitrary position in the document and is always rendered at the bottom of the page. Furthermore, a backlink is automatically added to the footnote reference.","title":"Inserting the content"},{"location":"extensions/footnotes/#on-a-single-line","text":"Short statements can be written on the same line. Example: [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Result: Jump to footnote at the bottom of the page [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit.","title":"on a single line"},{"location":"extensions/footnotes/#on-multiple-lines","text":"Paragraphs should be written on the next line. As with all Markdown blocks, the content must be indented by four spaces. Example: [^2]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Jump to footnote at the bottom of the page","title":"on multiple lines"},{"location":"extensions/metadata/","text":"Metadata The Metadata extension makes it possible to add metadata to a document which gives more control over the theme in a page-specific context. Installation Add the following lines to your mkdocs.yml : markdown_extensions : - meta Usage Metadata is written as a series of key-value pairs at the beginning of the Markdown document, delimited by a blank line which ends the metadata context. Naturally, the metadata is stripped from the document before rendering the actual page content and made available to the theme. Example: title: Lorem ipsum dolor sit amet description: Nullam urna elit, malesuada eget finibus ut, ac tortor. path: path/to/file source: file.js # Headline ... See the next section which covers the metadata that is supported by Material. Overriding the title The page title can be overridden on a per-document level: title: Lorem ipsum dolor sit amet This will set the title tag inside the document head for the current page to the provided value. It will also override the default behavior of Material for MkDocs which appends the site title using a dash as a separator to the page title. Overriding the description The page description can also be overridden on a per-document level: description : Nullam urna elit, malesuada eget finibus ut, ac tortor. This will set the meta tag containing the site description inside the document head for the current page to the provided value. Linking sources When a document is related to a specific set of source files and the repo_url is defined inside the project's mkdocs.yml , the files can be linked using the source key: source: file.js A new entry at the bottom of the table of contents is generated that is linking to the section listing the linked source files. Multiple files can be linked by adding filenames on separate lines: source: file.js file.css The filenames are appended to the repo_url set in your mkdocs.yml , but can be prefixed with a path to ensure correct path resolving: Example: path: tree/master/docs/extensions source: metadata.md Result: See the source section for the resulting output.","title":"Metadata"},{"location":"extensions/metadata/#metadata","text":"The Metadata extension makes it possible to add metadata to a document which gives more control over the theme in a page-specific context.","title":"Metadata"},{"location":"extensions/metadata/#installation","text":"Add the following lines to your mkdocs.yml : markdown_extensions : - meta","title":"Installation"},{"location":"extensions/metadata/#usage","text":"Metadata is written as a series of key-value pairs at the beginning of the Markdown document, delimited by a blank line which ends the metadata context. Naturally, the metadata is stripped from the document before rendering the actual page content and made available to the theme. Example: title: Lorem ipsum dolor sit amet description: Nullam urna elit, malesuada eget finibus ut, ac tortor. path: path/to/file source: file.js # Headline ... See the next section which covers the metadata that is supported by Material.","title":"Usage"},{"location":"extensions/metadata/#overriding-the-title","text":"The page title can be overridden on a per-document level: title: Lorem ipsum dolor sit amet This will set the title tag inside the document head for the current page to the provided value. It will also override the default behavior of Material for MkDocs which appends the site title using a dash as a separator to the page title.","title":"Overriding the title"},{"location":"extensions/metadata/#overriding-the-description","text":"The page description can also be overridden on a per-document level: description : Nullam urna elit, malesuada eget finibus ut, ac tortor. This will set the meta tag containing the site description inside the document head for the current page to the provided value.","title":"Overriding the description"},{"location":"extensions/metadata/#linking-sources","text":"When a document is related to a specific set of source files and the repo_url is defined inside the project's mkdocs.yml , the files can be linked using the source key: source: file.js A new entry at the bottom of the table of contents is generated that is linking to the section listing the linked source files. Multiple files can be linked by adding filenames on separate lines: source: file.js file.css The filenames are appended to the repo_url set in your mkdocs.yml , but can be prefixed with a path to ensure correct path resolving: Example: path: tree/master/docs/extensions source: metadata.md Result: See the source section for the resulting output.","title":"Linking sources"},{"location":"extensions/permalinks/","text":"Permalinks Permalinks are a feature of the Table of Contents extension, which is part of the standard Markdown library. The extension inserts an anchor at the end of each headline, which makes it possible to directly link to a subpart of the document. Installation To enable permalinks, add the following to your mkdocs.yml : markdown_extensions : - toc(permalink=true) This will add a link containing the paragraph symbol \u00b6 at the end of each headline (exactly like on the page you're currently viewing), which the Material theme will make appear on hover. In order to change the text of the permalink, a string can be passed, e.g.: markdown_extensions: - toc(permalink=Link) Usage When enabled, permalinks are inserted automatically.","title":"Permalinks"},{"location":"extensions/permalinks/#permalinks","text":"Permalinks are a feature of the Table of Contents extension, which is part of the standard Markdown library. The extension inserts an anchor at the end of each headline, which makes it possible to directly link to a subpart of the document.","title":"Permalinks"},{"location":"extensions/permalinks/#installation","text":"To enable permalinks, add the following to your mkdocs.yml : markdown_extensions : - toc(permalink=true) This will add a link containing the paragraph symbol \u00b6 at the end of each headline (exactly like on the page you're currently viewing), which the Material theme will make appear on hover. In order to change the text of the permalink, a string can be passed, e.g.: markdown_extensions: - toc(permalink=Link)","title":"Installation"},{"location":"extensions/permalinks/#usage","text":"When enabled, permalinks are inserted automatically.","title":"Usage"},{"location":"extensions/pymdown/","text":"PyMdown Extensions PyMdown Extensions is a collection of Markdown extensions that add some great features to the standard Markdown library. For this reason, the installation of this package is highly recommended as it's well-integrated with the Material theme. Installation The PyMdown Extensions package can be installed with the following command: pip install pymdown-extensions The following list of extensions that are part of the PyMdown Extensions package are recommended to be used together with the Material theme: markdown_extensions : - pymdownx.arithmatex - pymdownx.betterem(smart_enable=all) - pymdownx.caret - pymdownx.critic - pymdownx.emoji : emoji_generator : !!python/name:pymdownx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tasklist(custom_checkbox=true) - pymdownx.tilde Usage GitHub Flavored Markdown Most of the extensions included in the PyMdown Extensions package try to bring the Markdown experience closer to GitHub Flavored Markdown (GFM). The PyMdown Extensions package adds a shorthand to enable all of the included extensions that provide the GFM experience. However, usage of the shorthand is discouraged, because some extensions are not supported, as the Material theme uses some incompatible extensions included in the standard Markdown library. BetterEm BetterEm improves the handling of emphasis markup ( bold and italic ) within Markdown by providing a more sophisticated parser for better detecting start and end tokens. Read the documentation for usage notes . Emoji Emoji adds the ability to insert a -load of emojis that we use in our daily lives. See the EmojiOne demo for a list of all available emojis. Happy scrolling Legal disclaimer Material has no affiliation with EmojiOne which is released under CC BY 4.0 . When including EmojiOne images or CSS, please read the EmojiOne license to ensure proper usage and attribution. MagicLink MagicLink detects links in Markdown and auto-generates the necessary markup, so no special syntax is required. It auto-links http[s]:// and ftp:// links, as well as references to email addresses: SuperFences SuperFences provides the ability to nest code blocks under blockquotes, lists and other block elements, which the Fenced Code Blocks extension from the standard Markdown library doesn't parse correctly. Tasklist Tasklist adds support for styled checkbox lists. This is useful for keeping track of tasks and showing what has been done and has yet to be done. Checkbox lists are like regular lists, but prefixed with [ ] for empty or [x] for filled checkboxes. Example: * [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit * [x] Nulla lobortis egestas semper * [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est * [ ] Vestibulum convallis sit amet nisi a tincidunt * [x] In hac habitasse platea dictumst * [x] In scelerisque nibh non dolor mollis congue sed et metus * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis * [ ] Praesent sed risus massa * [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque * [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit Nulla lobortis egestas semper Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Sed egestas felis quis elit dapibus, ac aliquet turpis mattis Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Tilde Tilde provides an easy way to strike through cross out text. The portion of text that should be erased must be enclosed in two tildes ~~...~~ and the extension will take care of the rest. More syntactic sugar Caret Caret is the sister extension of Tilde and makes it possible to highlight inserted text . The portion of text that should be marked as added must be enclosed in two carets ^^...^^ . Mark Mark adds the ability to highlight text like it was marked with a yellow text marker . The portion of text that should be highlighted must be enclosed in two equal signs ==...== . SmartSymbols SmartSymbols converts markup for special characters into their corresponding symbols, e.g. arrows (\u2190, \u2192, \u2194), trademark and copyright symbols (\u00a9, \u2122, \u00ae) and fractions (\u00bd, \u00bc, ...). Critic Critic implements Critic Markup , a Markdown extension that enables the tracking of changes (additions, deletions and comments) on documents. During compilation of the Markdown document, changes can be rendered (default), accepted or rejected. Text can be deleted and replacement text added . This can also be combined into one a single operation. Highlighting is also possible and comments can be added inline . Formatting can also be applied to blocks, by putting the opening and closing tags on separate lines and adding new lines between the tags and the content. Arithmatex MathJax Arithmatex integrates Material with MathJax which parses block-style and inline equations written in TeX markup and outputs them in mathematical notation. See this thread for a short introduction and quick reference on how to write equations in TeX syntax. Besides activating the extension in the mkdocs.yml , the MathJax JavaScript runtime needs to be included. This must be done with additional JavaScript : extra_javascript : - 'https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML' If you want to override the default MathJax configuration, you can do this by adding another JavaScript file before the MathJax runtime in extra_javascript which contains your MathJax configuration, e.g.: window . MathJax = { tex2jax : { inlineMath : [ [ \"\\\\(\" , \"\\\\)\" ] ], displayMath : [ [ \"\\\\[\" , \"\\\\]\" ] ] }, TeX : { TagSide : \"right\" , TagIndent : \".8em\" , MultLineWidth : \"85%\" , equationNumbers : { autoNumber : \"AMS\" , }, unicode : { fonts : \"STIXGeneral,'Arial Unicode MS'\" } }, displayAlign : \"left\" , showProcessingMessages : false , messageStyle : \"none\" }; In your mkdocs.yml , include it with: extra_javascript : - 'javascripts/extra.js' - 'https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML' Blocks Blocks are enclosed in $$ ... $$ which are placed on separate lines. Example: $$ \\frac {n ! }{k !( n - k )! } = \\binom {n}{k} $$ Result: \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k} Inline Inline equations need to be enclosed in $ ... $ : Example: Lorem ipsum dolor sit amet: $ p ( x|y ) = \\frac {p ( y|x ) p ( x ) }{p ( y ) } $ Result: Lorem ipsum dolor sit amet: p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)} InlineHilite InlineHilite adds support for inline code highlighting. It's useful for short snippets included within body copy, e.g. var test = 0 ; and can be achived by prefixing inline code with a shebang and language identifier, e.g. #!js .","title":"PyMdown Extensions"},{"location":"extensions/pymdown/#pymdown-extensions","text":"PyMdown Extensions is a collection of Markdown extensions that add some great features to the standard Markdown library. For this reason, the installation of this package is highly recommended as it's well-integrated with the Material theme.","title":"PyMdown Extensions"},{"location":"extensions/pymdown/#installation","text":"The PyMdown Extensions package can be installed with the following command: pip install pymdown-extensions The following list of extensions that are part of the PyMdown Extensions package are recommended to be used together with the Material theme: markdown_extensions : - pymdownx.arithmatex - pymdownx.betterem(smart_enable=all) - pymdownx.caret - pymdownx.critic - pymdownx.emoji : emoji_generator : !!python/name:pymdownx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tasklist(custom_checkbox=true) - pymdownx.tilde","title":"Installation"},{"location":"extensions/pymdown/#usage","text":"","title":"Usage"},{"location":"extensions/pymdown/#github-flavored-markdown","text":"Most of the extensions included in the PyMdown Extensions package try to bring the Markdown experience closer to GitHub Flavored Markdown (GFM). The PyMdown Extensions package adds a shorthand to enable all of the included extensions that provide the GFM experience. However, usage of the shorthand is discouraged, because some extensions are not supported, as the Material theme uses some incompatible extensions included in the standard Markdown library.","title":"GitHub Flavored Markdown"},{"location":"extensions/pymdown/#betterem","text":"BetterEm improves the handling of emphasis markup ( bold and italic ) within Markdown by providing a more sophisticated parser for better detecting start and end tokens. Read the documentation for usage notes .","title":"BetterEm"},{"location":"extensions/pymdown/#emoji","text":"Emoji adds the ability to insert a -load of emojis that we use in our daily lives. See the EmojiOne demo for a list of all available emojis. Happy scrolling Legal disclaimer Material has no affiliation with EmojiOne which is released under CC BY 4.0 . When including EmojiOne images or CSS, please read the EmojiOne license to ensure proper usage and attribution.","title":"Emoji"},{"location":"extensions/pymdown/#magiclink","text":"MagicLink detects links in Markdown and auto-generates the necessary markup, so no special syntax is required. It auto-links http[s]:// and ftp:// links, as well as references to email addresses:","title":"MagicLink"},{"location":"extensions/pymdown/#superfences","text":"SuperFences provides the ability to nest code blocks under blockquotes, lists and other block elements, which the Fenced Code Blocks extension from the standard Markdown library doesn't parse correctly.","title":"SuperFences"},{"location":"extensions/pymdown/#tasklist","text":"Tasklist adds support for styled checkbox lists. This is useful for keeping track of tasks and showing what has been done and has yet to be done. Checkbox lists are like regular lists, but prefixed with [ ] for empty or [x] for filled checkboxes. Example: * [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit * [x] Nulla lobortis egestas semper * [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est * [ ] Vestibulum convallis sit amet nisi a tincidunt * [x] In hac habitasse platea dictumst * [x] In scelerisque nibh non dolor mollis congue sed et metus * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis * [ ] Praesent sed risus massa * [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque * [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit Nulla lobortis egestas semper Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Sed egestas felis quis elit dapibus, ac aliquet turpis mattis Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Nulla vel eros venenatis, imperdiet enim id, faucibus nisi","title":"Tasklist"},{"location":"extensions/pymdown/#tilde","text":"Tilde provides an easy way to strike through cross out text. The portion of text that should be erased must be enclosed in two tildes ~~...~~ and the extension will take care of the rest.","title":"Tilde"},{"location":"extensions/pymdown/#more-syntactic-sugar","text":"","title":"More syntactic sugar"},{"location":"extensions/pymdown/#caret","text":"Caret is the sister extension of Tilde and makes it possible to highlight inserted text . The portion of text that should be marked as added must be enclosed in two carets ^^...^^ .","title":"Caret"},{"location":"extensions/pymdown/#mark","text":"Mark adds the ability to highlight text like it was marked with a yellow text marker . The portion of text that should be highlighted must be enclosed in two equal signs ==...== .","title":"Mark"},{"location":"extensions/pymdown/#smartsymbols","text":"SmartSymbols converts markup for special characters into their corresponding symbols, e.g. arrows (\u2190, \u2192, \u2194), trademark and copyright symbols (\u00a9, \u2122, \u00ae) and fractions (\u00bd, \u00bc, ...).","title":"SmartSymbols"},{"location":"extensions/pymdown/#critic","text":"Critic implements Critic Markup , a Markdown extension that enables the tracking of changes (additions, deletions and comments) on documents. During compilation of the Markdown document, changes can be rendered (default), accepted or rejected. Text can be deleted and replacement text added . This can also be combined into one a single operation. Highlighting is also possible and comments can be added inline . Formatting can also be applied to blocks, by putting the opening and closing tags on separate lines and adding new lines between the tags and the content.","title":"Critic"},{"location":"extensions/pymdown/#arithmatex-mathjax","text":"Arithmatex integrates Material with MathJax which parses block-style and inline equations written in TeX markup and outputs them in mathematical notation. See this thread for a short introduction and quick reference on how to write equations in TeX syntax. Besides activating the extension in the mkdocs.yml , the MathJax JavaScript runtime needs to be included. This must be done with additional JavaScript : extra_javascript : - 'https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML' If you want to override the default MathJax configuration, you can do this by adding another JavaScript file before the MathJax runtime in extra_javascript which contains your MathJax configuration, e.g.: window . MathJax = { tex2jax : { inlineMath : [ [ \"\\\\(\" , \"\\\\)\" ] ], displayMath : [ [ \"\\\\[\" , \"\\\\]\" ] ] }, TeX : { TagSide : \"right\" , TagIndent : \".8em\" , MultLineWidth : \"85%\" , equationNumbers : { autoNumber : \"AMS\" , }, unicode : { fonts : \"STIXGeneral,'Arial Unicode MS'\" } }, displayAlign : \"left\" , showProcessingMessages : false , messageStyle : \"none\" }; In your mkdocs.yml , include it with: extra_javascript : - 'javascripts/extra.js' - 'https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML'","title":"Arithmatex MathJax"},{"location":"extensions/pymdown/#blocks","text":"Blocks are enclosed in $$ ... $$ which are placed on separate lines. Example: $$ \\frac {n ! }{k !( n - k )! } = \\binom {n}{k} $$ Result: \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k}","title":"Blocks"},{"location":"extensions/pymdown/#inline","text":"Inline equations need to be enclosed in $ ... $ : Example: Lorem ipsum dolor sit amet: $ p ( x|y ) = \\frac {p ( y|x ) p ( x ) }{p ( y ) } $ Result: Lorem ipsum dolor sit amet: p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)}","title":"Inline"},{"location":"extensions/pymdown/#inlinehilite","text":"InlineHilite adds support for inline code highlighting. It's useful for short snippets included within body copy, e.g. var test = 0 ; and can be achived by prefixing inline code with a shebang and language identifier, e.g. #!js .","title":"InlineHilite"},{"location":"extensions/client/actions/","text":"Generate Action Location : client/actions/ Actions are the place to coding sagas and reduxsuaces . Files Created The Generator of Action will the following files: index.ts - this export all reducers, selectors, and sagas. and also create all the watchers. sagas.ts - here all the sagas functions. redux.ts - here all the reducers/selectors functions. interface.ts - here all the interfaces define. manager.ts - utils functions to help mapping, configurations etc ... that needed for sagas and reducers. Create Action by cli $ gulp createAction --name myAction sagas.ts import { createDraft , Draft } from 'immer' ; import { createReducerCase } from '@base/features/base-decorator' ; import { createReducer , createActions } from 'reduxsauce' ; import { ApplicationState } from 'actions' ; import { TodoState , TypesNames , ActionCreator , SetExampleAction } from './interface' ; /* ------------- Types and Action Creators ------------- */ const { Creators } = createActions < TypesNames , ActionCreator > ({ mySaga : [ 'someData' ], // handle by saga setExample : [ 'exampleData' ] }); export const TodoTypes = TypesNames ; export const TodoActions = Creators ; /* ------------- Initial State ------------- */ const INITIAL_STATE = createDraft < TodoState > ({ exampleData : 'Initial Data Example' }); /* ------------- Selectors ------------- */ export const todoSelector = { getExampleData : ( state : ApplicationState ) => state . todo ? . exampleData }; /* ------------- Reducers ------------- */ const setExampleReducer = ( draft : Draft < TodoState > , action : SetExampleAction ) => { const { exampleData } = action ; draft . exampleData = exampleData ; }; /* ------------- Hookup Reducers To Types ------------- */ export const reducer = createReducer < any , any > ( INITIAL_STATE , { [ TypesNames . SET_EXAMPLE ] : createReducerCase ( setExampleReducer ) }); index.ts import { all , fork , takeLatest } from 'redux-saga/effects' ; import { createSaga } from '@base/features/base-decorator' ; import * as Sagas from 'actions/todo/sagas' ; import { TodoTypes } from 'actions/todo' ; /* ------------- Export Redux ------------- */ export * from 'actions/todo/redux' ; /* ------------- Export Sagas ------------- */ function * watchMySaga () { yield takeLatest ( TodoTypes . MY_SAGA , createSaga ( Sagas . mySaga )); } export function * todoSaga () { yield all ([ fork ( watchMySaga ) ]); } interface.ts import { Action } from 'redux' ; /* ------------- Define Actions and State ------------- */ export interface TodoState { exampleData : string ; } export enum TypesNames { SET_EXAMPLE = 'SET_EXAMPLE' , MY_SAGA = 'MY_SAGA' } export declare function SetExampleFunction ( exampleData : string ) : SetExampleAction ; export declare function MySagaFunction ( someData : string ) : MySagaAction ; export interface ActionCreator { setExample : typeof SetExampleFunction ; mySaga : typeof MySagaFunction ; } export interface SetExampleAction extends Action < TypesNames . SET_EXAMPLE > { exampleData : string ; } export interface MySagaAction extends Action < TypesNames . MY_SAGA > { someData : string ; } /* ------------- Define Any Interfaces ------------- */ export interface ResponseExample { name : string ; } manager.ts // Here you right all the \"sdk\" ( managers, utils etc .. ) // actually here is a function that are not saga and should return simple values without dispatch // for example function that get a and b and return a + b Redux Sagas For more information, read on https://github.com/redux-saga/redux-saga What is takeLatest? ( alias ) takeLatest < any , any > ( pattern : Pattern < any > , worker : HelperFunc1 < any , any > , arg1 : any ) : ForkEffect ( + 5 overloads ) import takeLatest Alternatively you may use takeLatest. Does not allow concurrent fetches of user. If \"SOME_ACTION\" gets dispatched while a fetch is already pending, that pending fetch is cancelled and only the latest one will be run.","title":"Actions"},{"location":"extensions/client/actions/#generate-action","text":"Location : client/actions/ Actions are the place to coding sagas and reduxsuaces .","title":"Generate Action"},{"location":"extensions/client/actions/#files-created","text":"The Generator of Action will the following files: index.ts - this export all reducers, selectors, and sagas. and also create all the watchers. sagas.ts - here all the sagas functions. redux.ts - here all the reducers/selectors functions. interface.ts - here all the interfaces define. manager.ts - utils functions to help mapping, configurations etc ... that needed for sagas and reducers.","title":"Files Created"},{"location":"extensions/client/actions/#create-action-by-cli","text":"$ gulp createAction --name myAction","title":"Create Action by cli"},{"location":"extensions/client/actions/#sagasts","text":"import { createDraft , Draft } from 'immer' ; import { createReducerCase } from '@base/features/base-decorator' ; import { createReducer , createActions } from 'reduxsauce' ; import { ApplicationState } from 'actions' ; import { TodoState , TypesNames , ActionCreator , SetExampleAction } from './interface' ; /* ------------- Types and Action Creators ------------- */ const { Creators } = createActions < TypesNames , ActionCreator > ({ mySaga : [ 'someData' ], // handle by saga setExample : [ 'exampleData' ] }); export const TodoTypes = TypesNames ; export const TodoActions = Creators ; /* ------------- Initial State ------------- */ const INITIAL_STATE = createDraft < TodoState > ({ exampleData : 'Initial Data Example' }); /* ------------- Selectors ------------- */ export const todoSelector = { getExampleData : ( state : ApplicationState ) => state . todo ? . exampleData }; /* ------------- Reducers ------------- */ const setExampleReducer = ( draft : Draft < TodoState > , action : SetExampleAction ) => { const { exampleData } = action ; draft . exampleData = exampleData ; }; /* ------------- Hookup Reducers To Types ------------- */ export const reducer = createReducer < any , any > ( INITIAL_STATE , { [ TypesNames . SET_EXAMPLE ] : createReducerCase ( setExampleReducer ) });","title":"sagas.ts"},{"location":"extensions/client/actions/#indexts","text":"import { all , fork , takeLatest } from 'redux-saga/effects' ; import { createSaga } from '@base/features/base-decorator' ; import * as Sagas from 'actions/todo/sagas' ; import { TodoTypes } from 'actions/todo' ; /* ------------- Export Redux ------------- */ export * from 'actions/todo/redux' ; /* ------------- Export Sagas ------------- */ function * watchMySaga () { yield takeLatest ( TodoTypes . MY_SAGA , createSaga ( Sagas . mySaga )); } export function * todoSaga () { yield all ([ fork ( watchMySaga ) ]); }","title":"index.ts"},{"location":"extensions/client/actions/#interfacets","text":"import { Action } from 'redux' ; /* ------------- Define Actions and State ------------- */ export interface TodoState { exampleData : string ; } export enum TypesNames { SET_EXAMPLE = 'SET_EXAMPLE' , MY_SAGA = 'MY_SAGA' } export declare function SetExampleFunction ( exampleData : string ) : SetExampleAction ; export declare function MySagaFunction ( someData : string ) : MySagaAction ; export interface ActionCreator { setExample : typeof SetExampleFunction ; mySaga : typeof MySagaFunction ; } export interface SetExampleAction extends Action < TypesNames . SET_EXAMPLE > { exampleData : string ; } export interface MySagaAction extends Action < TypesNames . MY_SAGA > { someData : string ; } /* ------------- Define Any Interfaces ------------- */ export interface ResponseExample { name : string ; }","title":"interface.ts"},{"location":"extensions/client/actions/#managerts","text":"// Here you right all the \"sdk\" ( managers, utils etc .. ) // actually here is a function that are not saga and should return simple values without dispatch // for example function that get a and b and return a + b Redux Sagas For more information, read on https://github.com/redux-saga/redux-saga What is takeLatest? ( alias ) takeLatest < any , any > ( pattern : Pattern < any > , worker : HelperFunc1 < any , any > , arg1 : any ) : ForkEffect ( + 5 overloads ) import takeLatest Alternatively you may use takeLatest. Does not allow concurrent fetches of user. If \"SOME_ACTION\" gets dispatched while a fetch is already pending, that pending fetch is cancelled and only the latest one will be run.","title":"manager.ts"},{"location":"extensions/client/api/","text":"","title":"Api"},{"location":"extensions/client/base/","text":"Base Folder Base Folder include the core files. You can see that as Harmony framework. Customization Generally yuou should not change the files in this folder unless you know what is going there and you want to custom it. See more Contributing section if you want to improve Harmony Base Folder :). Inside base you can found Features folder: features Features include all the core features that use in your application, such as error handler, global spinner logic etc ..","title":"Base Folder"},{"location":"extensions/client/base/#base-folder","text":"Base Folder include the core files. You can see that as Harmony framework. Customization Generally yuou should not change the files in this folder unless you know what is going there and you want to custom it. See more Contributing section if you want to improve Harmony Base Folder :). Inside base you can found Features folder: features Features include all the core features that use in your application, such as error handler, global spinner logic etc ..","title":"Base Folder"},{"location":"extensions/client/cart/","text":"Cart Cart Concept The cart feature give you the basic functionality that any cart need. The basic redux actions and saga already built-in in harmony. - \\src\\actions\\redux\\cart - \\src\\actions\\sagas\\cart Redux Actions \\src\\actions\\redux\\cart setCartId addToCart updateCart removeFromCart clearCart Saga Actions \\src\\actions\\sagas\\cart addSaga - add item to cart removeSaga - remove item from cart clearSaga - clear cart Define the Item Interface in \\src\\actions\\redux\\cart\\interfaces.ts you can define the structure of each item/s interface CartItem { id : number | string ; brand : string ; name : string ; description : string ; image? : string ; price : number ; quantity? : number ; } Remember - Cart Feature created to provide you basic actions that any cart should have. you can do anything with that sagas for your project needed. The main purpose of that cart is give you fast starter kit with cart. Cart in Store Example { cart : { items : [ { id : 'Yezz LIV1' , name : 'Yezz LIV1' , price : 316 , description : 'TFT capacitive touchscreen, 16M colors Available. Released 2019, September' , brand : 'Yezz' , image : '/assets/images/src/actions/sagas/catalog/generic-mobile.jpg' , quantity : 1 }, { id : 'Xiaomi Redmi 8A' , name : 'Xiaomi Redmi 8A' , price : 96.99 , description : 'IPS LCD capacitive touchscreen, 16M colors Available. Released 2019, September' , brand : 'Xiaomi' , image : '/assets/images/src/actions/sagas/catalog/generic-mobile.jpg' , quantity : 1 }, { id : 'Samsung Galaxy A70s' , name : 'Samsung Galaxy A70s' , price : 876 , description : 'Super AMOLED capacitive touchscreen, 16M colors Available. Released 2019, September' , brand : 'Samsung' , image : '/assets/images/src/actions/sagas/catalog/generic-mobile.jpg' , quantity : 1 } ], cartId : '2467654' } }","title":"Cart"},{"location":"extensions/client/cart/#cart","text":"","title":"Cart"},{"location":"extensions/client/cart/#cart-concept","text":"The cart feature give you the basic functionality that any cart need. The basic redux actions and saga already built-in in harmony. - \\src\\actions\\redux\\cart - \\src\\actions\\sagas\\cart","title":"Cart Concept"},{"location":"extensions/client/cart/#redux-actions","text":"\\src\\actions\\redux\\cart setCartId addToCart updateCart removeFromCart clearCart","title":"Redux Actions"},{"location":"extensions/client/cart/#saga-actions","text":"\\src\\actions\\sagas\\cart addSaga - add item to cart removeSaga - remove item from cart clearSaga - clear cart","title":"Saga Actions"},{"location":"extensions/client/cart/#define-the-item-interface","text":"in \\src\\actions\\redux\\cart\\interfaces.ts you can define the structure of each item/s interface CartItem { id : number | string ; brand : string ; name : string ; description : string ; image? : string ; price : number ; quantity? : number ; } Remember - Cart Feature created to provide you basic actions that any cart should have. you can do anything with that sagas for your project needed. The main purpose of that cart is give you fast starter kit with cart.","title":"Define the Item Interface"},{"location":"extensions/client/cart/#cart-in-store-example","text":"{ cart : { items : [ { id : 'Yezz LIV1' , name : 'Yezz LIV1' , price : 316 , description : 'TFT capacitive touchscreen, 16M colors Available. Released 2019, September' , brand : 'Yezz' , image : '/assets/images/src/actions/sagas/catalog/generic-mobile.jpg' , quantity : 1 }, { id : 'Xiaomi Redmi 8A' , name : 'Xiaomi Redmi 8A' , price : 96.99 , description : 'IPS LCD capacitive touchscreen, 16M colors Available. Released 2019, September' , brand : 'Xiaomi' , image : '/assets/images/src/actions/sagas/catalog/generic-mobile.jpg' , quantity : 1 }, { id : 'Samsung Galaxy A70s' , name : 'Samsung Galaxy A70s' , price : 876 , description : 'Super AMOLED capacitive touchscreen, 16M colors Available. Released 2019, September' , brand : 'Samsung' , image : '/assets/images/src/actions/sagas/catalog/generic-mobile.jpg' , quantity : 1 } ], cartId : '2467654' } }","title":"Cart in Store Example"},{"location":"extensions/client/client/","text":"Client Client Project include all the code for the client side. Client based reeact and redux . Client Folder Structure . | \u251c\u2500\u2500 src | \u251c\u2500\u2500 actions | \u251c\u2500\u2500 redux | \u251c\u2500\u2500 saga | \u251c\u2500\u2500 index.ts | \u251c\u2500\u2500 base | \u251c\u2500\u2500 features | \u251c\u2500\u2500 configurations | \u251c\u2500\u2500 spinner.config.json | \u251c\u2500\u2500 common-components | \u251c\u2500\u2500 pages | \u251c\u2500\u2500 ios | \u251c\u2500\u2500 android | \u251c\u2500\u2500 public | \u251c\u2500\u2500 assets | \u251c\u2500\u2500 sass | \u251c\u2500\u2500 index.ejs | \u251c\u2500\u2500 requests | \u251c\u2500\u2500 translation | \u251c\u2500\u2500 index.ts | \u251c\u2500\u2500 config.ts | \u251c\u2500\u2500 index.tsx Base Technologies Syntax typescript React react react-navigation Redux redux redux-saga redux-sauce redux-flow-manager Utils immer axios Builds react-native","title":"Client Introduction"},{"location":"extensions/client/client/#client","text":"Client Project include all the code for the client side. Client based reeact and redux .","title":"Client"},{"location":"extensions/client/client/#client-folder-structure","text":". | \u251c\u2500\u2500 src | \u251c\u2500\u2500 actions | \u251c\u2500\u2500 redux | \u251c\u2500\u2500 saga | \u251c\u2500\u2500 index.ts | \u251c\u2500\u2500 base | \u251c\u2500\u2500 features | \u251c\u2500\u2500 configurations | \u251c\u2500\u2500 spinner.config.json | \u251c\u2500\u2500 common-components | \u251c\u2500\u2500 pages | \u251c\u2500\u2500 ios | \u251c\u2500\u2500 android | \u251c\u2500\u2500 public | \u251c\u2500\u2500 assets | \u251c\u2500\u2500 sass | \u251c\u2500\u2500 index.ejs | \u251c\u2500\u2500 requests | \u251c\u2500\u2500 translation | \u251c\u2500\u2500 index.ts | \u251c\u2500\u2500 config.ts | \u251c\u2500\u2500 index.tsx","title":"Client Folder Structure"},{"location":"extensions/client/client/#base-technologies","text":"","title":"Base Technologies"},{"location":"extensions/client/client/#syntax","text":"typescript","title":"Syntax"},{"location":"extensions/client/client/#react","text":"react react-navigation","title":"React"},{"location":"extensions/client/client/#redux","text":"redux redux-saga redux-sauce redux-flow-manager","title":"Redux"},{"location":"extensions/client/client/#utils","text":"immer axios","title":"Utils"},{"location":"extensions/client/client/#builds","text":"react-native","title":"Builds"},{"location":"extensions/client/components/","text":"Generate Components Location : src/components/ Components, not much to say, here your components ( components/ ) or in other words dump components, it means that the component is not connect to redux and relay only on props. We recommended to use arrow function for better performance, But you can also use React Component. Create Component by cli $ gulp createComponent --name MyComponent --storyTitle Business Components/MyComponent","title":"Generate Components"},{"location":"extensions/client/components/#generate-components","text":"Location : src/components/ Components, not much to say, here your components ( components/ ) or in other words dump components, it means that the component is not connect to redux and relay only on props. We recommended to use arrow function for better performance, But you can also use React Component.","title":"Generate Components"},{"location":"extensions/client/components/#create-component-by-cli","text":"$ gulp createComponent --name MyComponent --storyTitle Business Components/MyComponent","title":"Create Component by cli"},{"location":"extensions/client/config/","text":"Config Client configuration located on ./src/config/index.ts export const config = { COMMON_AUTHORIZATION_HEADER : 'Authorization' , COMMON_AUTHORIZATION_HEADER_REQUEST : 'Authorization' , COMMON_URL_PARAMS : [{ key : 'permanentParam' , value : 'channel' }], ROOT_SERVER_URL : 'https://SOME_BASE_URL' } Define your root server url These variables are used in app.","title":"Main Configuration"},{"location":"extensions/client/config/#config","text":"Client configuration located on ./src/config/index.ts export const config = { COMMON_AUTHORIZATION_HEADER : 'Authorization' , COMMON_AUTHORIZATION_HEADER_REQUEST : 'Authorization' , COMMON_URL_PARAMS : [{ key : 'permanentParam' , value : 'channel' }], ROOT_SERVER_URL : 'https://SOME_BASE_URL' } Define your root server url These variables are used in app.","title":"Config"},{"location":"extensions/client/containers/","text":"Generate Core Components Location : src/containers/ Containers is the components who is connected to redux. Create Container by cli $ gulp createContainer --className myClassName Example Code Harmony Connect Any Container connected to redux with harmonyConnect to enjoy all of Harmony features. Read more about Harmony Connect in Base Folder Section. import * as React from 'react' ; import { baseConnect } from '@base/features/base-redux-react-connect' ; interface IProps { languages : any ; setActiveLanguage : Function ; } class Localization extends React . Component < IProps > { render () { const { languages , setActiveLanguage } = this . props ; return ( < div className = \"locale\" style = {{ width : '100%' , padding : '10px' , textAlign : 'center' }} > Language : < select onChange = {( event : any ) => { setActiveLanguage ( event . target . value ); }} > { languages . map (( lang : any ) => ( < option key = { lang . code } value = { lang . code } > { lang . code } < /option> )) } < /select> < /div> ); } } export default baseConnect ( Localization , ( /* state */ ) => { return {}; }, { } );","title":"Generate Core Components"},{"location":"extensions/client/containers/#generate-core-components","text":"Location : src/containers/ Containers is the components who is connected to redux. Create Container by cli $ gulp createContainer --className myClassName","title":"Generate Core Components"},{"location":"extensions/client/containers/#example-code","text":"Harmony Connect Any Container connected to redux with harmonyConnect to enjoy all of Harmony features. Read more about Harmony Connect in Base Folder Section. import * as React from 'react' ; import { baseConnect } from '@base/features/base-redux-react-connect' ; interface IProps { languages : any ; setActiveLanguage : Function ; } class Localization extends React . Component < IProps > { render () { const { languages , setActiveLanguage } = this . props ; return ( < div className = \"locale\" style = {{ width : '100%' , padding : '10px' , textAlign : 'center' }} > Language : < select onChange = {( event : any ) => { setActiveLanguage ( event . target . value ); }} > { languages . map (( lang : any ) => ( < option key = { lang . code } value = { lang . code } > { lang . code } < /option> )) } < /select> < /div> ); } } export default baseConnect ( Localization , ( /* state */ ) => { return {}; }, { } );","title":"Example Code"},{"location":"extensions/client/core_components/","text":"Generate Core Components Location : client/components/ Core Components Include your custom basic components that serve your application. For example: myInput, myTextarea, myH1 etc.. Those components created by you and most the time wrap the basic html5 elements with your design and additional elements. Any core component is wrap with createField. createField convert your component to Filed from redux-form, this useful when you use your components inside Form Container. If you use createField your component be able to get the follwoing data: meta: { touched, error, warning }, input This data provide you the information that send from Form Container and can serve you for validations and more... Core Component Name CLI automatically inject Cor_ prefix to your core component. this best practice to use prefix name to core components to recognize them inside containers. Create Core Component by cli $ gulp createCoreComponent --name MyCoreComponent Create Core Component manually 1) Add new folder with the component name to `( components/core/ )` . 2) Create `index.js` file. this is the place to write your component code. 3) Export your component path inside `( Components/core/index.js )` . add `Cor_` prefix to the component name. 4) Now you can import the component from core: `import { Input } from '../../components/core';` Example Code import PropTypes from 'prop-types' ; import { createField } from '../../../base/features/harmony-redux-form-field' ; const component = ({ meta : { touched , error , warning , invalid }, input , label , T }) => { return ( < div className = { `form-group ${ touched && invalid ? 'has-danger' : '' } ` } > < label > { label } < /label> < div > < textarea {... input } placeholder = { label } className = \"form-control\" /> < div style = {{ color : '#d9534f' }} > { touched && T ( error )} < /div> < /div> < /div> ); }; export default createField ( component , { label : PropTypes . string . isRequired , T : PropTypes . func . isRequired });","title":"Generate Core Components"},{"location":"extensions/client/core_components/#generate-core-components","text":"Location : client/components/ Core Components Include your custom basic components that serve your application. For example: myInput, myTextarea, myH1 etc.. Those components created by you and most the time wrap the basic html5 elements with your design and additional elements. Any core component is wrap with createField. createField convert your component to Filed from redux-form, this useful when you use your components inside Form Container. If you use createField your component be able to get the follwoing data: meta: { touched, error, warning }, input This data provide you the information that send from Form Container and can serve you for validations and more... Core Component Name CLI automatically inject Cor_ prefix to your core component. this best practice to use prefix name to core components to recognize them inside containers.","title":"Generate Core Components"},{"location":"extensions/client/core_components/#create-core-component-by-cli","text":"$ gulp createCoreComponent --name MyCoreComponent","title":"Create Core Component by cli"},{"location":"extensions/client/core_components/#create-core-component-manually","text":"1) Add new folder with the component name to `( components/core/ )` . 2) Create `index.js` file. this is the place to write your component code. 3) Export your component path inside `( Components/core/index.js )` . add `Cor_` prefix to the component name. 4) Now you can import the component from core: `import { Input } from '../../components/core';`","title":"Create Core Component manually"},{"location":"extensions/client/core_components/#example-code","text":"import PropTypes from 'prop-types' ; import { createField } from '../../../base/features/harmony-redux-form-field' ; const component = ({ meta : { touched , error , warning , invalid }, input , label , T }) => { return ( < div className = { `form-group ${ touched && invalid ? 'has-danger' : '' } ` } > < label > { label } < /label> < div > < textarea {... input } placeholder = { label } className = \"form-control\" /> < div style = {{ color : '#d9534f' }} > { touched && T ( error )} < /div> < /div> < /div> ); }; export default createField ( component , { label : PropTypes . string . isRequired , T : PropTypes . func . isRequired });","title":"Example Code"},{"location":"extensions/client/development/","text":"Development Guidelines & Code Guards The rules that being used in this boilerplate will cover most of the common human-mistakes while coding. For example, passing all the props down-stream to child components its not allowed, this rule will improve the performance of your website since you make sure that your component will be rendered only with the required props. \"rules\" : { \"no-multiple-empty-lines\" : [ \"error\" , { \"max\" : 1 , \"maxEOF\" : 1 }], \"react/sort-comp\" : [ \"off\" ], \"react/prefer-stateless-function\" : [ \"off\" ], \"import/no-named-as-default\" : [ \"off\" ], \"arrow-body-style\" : [ \"off\" ], \"import/order\" : [ \"off\" ], \"func-names\" : [ \"off\" ], \"guard-for-in\" : [ \"off\" ], \"lines-between-class-members\" : [ \"off\" ], \"import/prefer-default-export\" : \"off\" , \"import/no-default-export\" : \"off\" , \"react/jsx-one-expression-per-line\" : [ \"off\" ], \"class-methods-use-this\" : [ \"off\" ], \"max-len\" : [ \"error\" , { \"code\" : 120 }], \"@typescript-eslint/explicit-function-return-type\" : [ \"off\" ], \"@typescript-eslint/no-use-before-define\" : [ \"off\" ], \"@typescript-eslint/no-explicit-any\" : [ \"off\" ], \"no-trailing-spaces\" : [ \"error\" , { \"skipBlankLines\" : true , \"ignoreComments\" : true }], \"react/jsx-props-no-spreadings\" : [ \"off\" ], \"linebreak-style\" : 0 , \"global-require\" : 0 , \"eslint-linebreak-style\" : [ 0 , \"error\" , \"windows\" ], \"indent\" : [ \"error\" , \"tab\" , { \"SwitchCase\" : 1 }], \"no-tabs\" : [ \"error\" , { \"allowIndentationTabs\" : true }], \"react/jsx-indent-props\" : [ \"error\" , \"tab\" ], \"react/jsx-indent\" : [ \"error\" , \"tab\" ], \"@typescript-eslint/indent\" : [ \"error\" , \"tab\" ], \"comma-dangle\" : [ \"error\" , \"only-multiline\" ], \"no-console\" : 1 }","title":"Development"},{"location":"extensions/client/development/#development-guidelines-code-guards","text":"The rules that being used in this boilerplate will cover most of the common human-mistakes while coding. For example, passing all the props down-stream to child components its not allowed, this rule will improve the performance of your website since you make sure that your component will be rendered only with the required props. \"rules\" : { \"no-multiple-empty-lines\" : [ \"error\" , { \"max\" : 1 , \"maxEOF\" : 1 }], \"react/sort-comp\" : [ \"off\" ], \"react/prefer-stateless-function\" : [ \"off\" ], \"import/no-named-as-default\" : [ \"off\" ], \"arrow-body-style\" : [ \"off\" ], \"import/order\" : [ \"off\" ], \"func-names\" : [ \"off\" ], \"guard-for-in\" : [ \"off\" ], \"lines-between-class-members\" : [ \"off\" ], \"import/prefer-default-export\" : \"off\" , \"import/no-default-export\" : \"off\" , \"react/jsx-one-expression-per-line\" : [ \"off\" ], \"class-methods-use-this\" : [ \"off\" ], \"max-len\" : [ \"error\" , { \"code\" : 120 }], \"@typescript-eslint/explicit-function-return-type\" : [ \"off\" ], \"@typescript-eslint/no-use-before-define\" : [ \"off\" ], \"@typescript-eslint/no-explicit-any\" : [ \"off\" ], \"no-trailing-spaces\" : [ \"error\" , { \"skipBlankLines\" : true , \"ignoreComments\" : true }], \"react/jsx-props-no-spreadings\" : [ \"off\" ], \"linebreak-style\" : 0 , \"global-require\" : 0 , \"eslint-linebreak-style\" : [ 0 , \"error\" , \"windows\" ], \"indent\" : [ \"error\" , \"tab\" , { \"SwitchCase\" : 1 }], \"no-tabs\" : [ \"error\" , { \"allowIndentationTabs\" : true }], \"react/jsx-indent-props\" : [ \"error\" , \"tab\" ], \"react/jsx-indent\" : [ \"error\" , \"tab\" ], \"@typescript-eslint/indent\" : [ \"error\" , \"tab\" ], \"comma-dangle\" : [ \"error\" , \"only-multiline\" ], \"no-console\" : 1 }","title":"Development Guidelines &amp; Code Guards"},{"location":"extensions/client/error_handler/","text":"Error Handler Error Handler Concept Harmony support with Error Handler mechanism to easy maintain your api errors easy and fast with by maintaining one configuration. Under configuration folder you can find error.config.json file. Location : src/configurations/error.config.json The Concept of the error handler is to catch API error and handle it just by configuration. For example: when get devices api failed go to error page, or when submit order failed, display a popup with a message. The idea is to catch those error and decied what to do via just configuration file. Each time a API failed, the API will return some status code + error code from the API. <errorCode>_<statusCode> - Will be the key in the config file, and the value will be \"how we want to handle the error\". Usage Let's look first how this config look like with the example { \"pathToErrorCode\" : \"data.errorCode\" , \"handlers\" : { \"devicesListFailed_400\" : { \"component\" : \"modal\" , \"payload\" : { \"header\" : \"Error\" , \"body\" : \"Error with Fetch Device List\" } }, \"devicesListFailed_206\" : { \"level\" : \"component\" , \"component\" : \"notification\" , \"payload\" : { \"type\" : \"danger\" , \"header\" : \"deviceGallery.specificErrorHandlerToComponentHeader\" , \"body\" : \"deviceGallery.specificErrorHandlerToComponentBody\" } }, \"devicesListFailed_500\" : { \"component\" : \"ignore\" } } } pathToErrorCode - the path to the error code from the response. handlers - here we define our handlers <errorCode>_<statusCode> . level <optional> - when set level to component then the error will be display only for specific component that handle it with withErrorHandler component - the component type to render inc case of this error. payload - any payload data that can be use for the render component. ignore - ignore component will ignore the error handler for that failure and error handler will do nothing for this error. if we look at the example, when we get error code devicesListFailed and status code 400 we will display modal component. The payload can be anything that we want to send to that component as props. @withErrorHandler In some cases when api failed, you want to display error only on specific component on the screen, and not some global component such modal etc .. For that case, you can use the decorator @withErrorHandler . @withErrorHandler get the following config: errorCodes - array of error codes from the error handler configuration file asComponent <optional> - by default set to false. if set to true, the decorator will not replace the component by default with error component, but it will inject for you to the props ErrorComponent , and you can decide by your self where to render this component. Injected Props - to component that use this decorator, will get injected props: ErrorComponent - a Component that can be render in your decorated component. errorHandled - a function that once called he clear the error and not send ErrorComponent to props anymore. Configuration In error handle configuration file you must to define this error code with \"level\": \"component\" you can see here example how to use it: import withErrorHandler from 'containers/ErrorHandler/withErrorHandler' ; @withErrorHandler ({ errorCodes : [ 'devicesListFailed_206' ], asComponent : true // if set to false, all the component will be replaced with ErrorComponent by default }) class DeviceGallery extends React . Component < Props , State > { constructor ( props : Props ) { super ( props ); this . state = { searchValue : '' }; } ..... } Customization Location for Global Error Handler : src/containers/ErrorHandler/index.tsx Location for with error handler decorator : src/containers/ErrorHandler/withErrorHandler.tsx In this location you can found the Error Handler \"Decider\". Each time error occurred this component will be invoke the render and will go inside a switch case. The switch case decide which component to render and what to do for each error component. So here you can easily do what ever you like and customize the modal and even add your own components for handler. Strict Client Console Errors Harmony keep to be strict with best practices and clean console from errors. Therefor by default we drop developer to error page and notify with toaster for any console error. To turn off this functionality go to main src/config.ts file and set STRICT_CONSOLE_ERROR to false","title":"Error Handler"},{"location":"extensions/client/error_handler/#error-handler","text":"","title":"Error Handler"},{"location":"extensions/client/error_handler/#error-handler-concept","text":"Harmony support with Error Handler mechanism to easy maintain your api errors easy and fast with by maintaining one configuration. Under configuration folder you can find error.config.json file. Location : src/configurations/error.config.json The Concept of the error handler is to catch API error and handle it just by configuration. For example: when get devices api failed go to error page, or when submit order failed, display a popup with a message. The idea is to catch those error and decied what to do via just configuration file. Each time a API failed, the API will return some status code + error code from the API. <errorCode>_<statusCode> - Will be the key in the config file, and the value will be \"how we want to handle the error\".","title":"Error Handler Concept"},{"location":"extensions/client/error_handler/#usage","text":"Let's look first how this config look like with the example { \"pathToErrorCode\" : \"data.errorCode\" , \"handlers\" : { \"devicesListFailed_400\" : { \"component\" : \"modal\" , \"payload\" : { \"header\" : \"Error\" , \"body\" : \"Error with Fetch Device List\" } }, \"devicesListFailed_206\" : { \"level\" : \"component\" , \"component\" : \"notification\" , \"payload\" : { \"type\" : \"danger\" , \"header\" : \"deviceGallery.specificErrorHandlerToComponentHeader\" , \"body\" : \"deviceGallery.specificErrorHandlerToComponentBody\" } }, \"devicesListFailed_500\" : { \"component\" : \"ignore\" } } } pathToErrorCode - the path to the error code from the response. handlers - here we define our handlers <errorCode>_<statusCode> . level <optional> - when set level to component then the error will be display only for specific component that handle it with withErrorHandler component - the component type to render inc case of this error. payload - any payload data that can be use for the render component. ignore - ignore component will ignore the error handler for that failure and error handler will do nothing for this error. if we look at the example, when we get error code devicesListFailed and status code 400 we will display modal component. The payload can be anything that we want to send to that component as props.","title":"Usage"},{"location":"extensions/client/error_handler/#witherrorhandler","text":"In some cases when api failed, you want to display error only on specific component on the screen, and not some global component such modal etc .. For that case, you can use the decorator @withErrorHandler . @withErrorHandler get the following config: errorCodes - array of error codes from the error handler configuration file asComponent <optional> - by default set to false. if set to true, the decorator will not replace the component by default with error component, but it will inject for you to the props ErrorComponent , and you can decide by your self where to render this component. Injected Props - to component that use this decorator, will get injected props: ErrorComponent - a Component that can be render in your decorated component. errorHandled - a function that once called he clear the error and not send ErrorComponent to props anymore. Configuration In error handle configuration file you must to define this error code with \"level\": \"component\" you can see here example how to use it: import withErrorHandler from 'containers/ErrorHandler/withErrorHandler' ; @withErrorHandler ({ errorCodes : [ 'devicesListFailed_206' ], asComponent : true // if set to false, all the component will be replaced with ErrorComponent by default }) class DeviceGallery extends React . Component < Props , State > { constructor ( props : Props ) { super ( props ); this . state = { searchValue : '' }; } ..... }","title":"@withErrorHandler"},{"location":"extensions/client/error_handler/#customization","text":"Location for Global Error Handler : src/containers/ErrorHandler/index.tsx Location for with error handler decorator : src/containers/ErrorHandler/withErrorHandler.tsx In this location you can found the Error Handler \"Decider\". Each time error occurred this component will be invoke the render and will go inside a switch case. The switch case decide which component to render and what to do for each error component. So here you can easily do what ever you like and customize the modal and even add your own components for handler.","title":"Customization"},{"location":"extensions/client/error_handler/#strict-client-console-errors","text":"Harmony keep to be strict with best practices and clean console from errors. Therefor by default we drop developer to error page and notify with toaster for any console error. To turn off this functionality go to main src/config.ts file and set STRICT_CONSOLE_ERROR to false","title":"Strict Client Console Errors"},{"location":"extensions/client/flow_manager/","text":"redux-flow-manager Flow Manager help you to manage flow information by determine the current step, next step and define the set of conditions that satisfy the steps. Flow Manger using XState for state machine to calculate where are you currently in the flow and where you need to go. Motivation redux-flow-manager created to help you manage application with complex flows. In the flow diagram below you can see example of one flow that can be in your application. In that flow diagram, each color is sub flow , and green and red steps are start and end flow. Redux Flow Manager help you to manage this sub flows and get decisions where you are and where you need to go. Install npm install --save redux-flow-manager Usage Check out the the example in the files app.ts and flowManger.browser.ts in the test folder . Step 1: Add the flow manager reducer to your project. import { combineReducers } from 'redux' ; import { flowManagerReducer } from 'redux-flow-manager' ; const rootReducer = combineReducers ({ flowManager : flowManagerReducer }); ... Step 2: Create Steps Configuration file - steps config define the set of steps for each sub flow types. (config files properties are explained below. Steps Configuration Step 3: Create Flows Configuration file - flow config file define the sub flow types name and the conditions that should be success to make this sub flow valid. (config files properties are explained below. Flows Configuration Step 4: Call CreateFlowManagerAPI with your store, reducer slice name, flows configuration and steps configuration. ( more details of how configuration should be look like will explain later ) // ./index.js import store from './store' ; import CreateFlowManagerAPI from 'redux-flow-manager' ; export default CreateFlowManagerAPI ( store , 'flowManager' , flowsConfig , stepsConfig ); Step 5: CreateFlowManagerAPI return an instance of Flow Manager with functionality that will help you manage flows in your app. // ./SomeComponent.jsx class App extends SomeComponent { // will set teh main flow type when clock on button render () { return ( < button onClick = {() => flowManagerAPI . startFlow ( 'CHQ' , true );} > Start CHQ Flow < /button> ); } } // ./OtherComponent class App extends OtherComponent { // get the next step const nextStep = flowManagerAPI . getNextStep (); render () { return ( < button onClick = {() => redirectToStep ( nextStep )} > Move to Next Step < /button> ); } } Store Structure interface FlowManagerState { flowType : string ; subFlowTypes : Array < string > ; currentStep : string ; nextStep : string ; steps : Array < string > ; } Initial Flow Manager CreateFlowManagerAPI(store, sliceName, flowsConfig, stepsConfig); Create new instance of flow manager. All the API methods of flow manager describe below. arguments: Property Type Required Default Description store object Required undefined Pass in the redux store. sliceName string Required undefined the name of the reducer slice flowsConfig SubFlowsConfig Required undefined Flows Configuration stepsConfig StepsConfig Required undefined Steps Configuration Start and End Flow async startFlow(flowType, autoUpdate, currentStep) Start flow is used when your app is init the main flow type in the store. That flow type represent a set of sub flow types in your Flows Configuration arguments: Property Type Required Default Description flowType string Required undefined The flow type that represent a set of sub flow types Flows Configuration currentStep string Required undefined Initial specific step by start the flow instead of the first step that define in steps array autoUpdate boolean Optional undefined Optionally pass indicate to automatic run state machine calculator to calculate the flow information data for any change in store endFlow() End the flow. Clear all the data from flow manager. arguments: None Steps Actions async updateInformation() Update Information running the state machine to calculate the sub flows condition and update the steps information and sub flows. NOTE : If you call startFlow with autoUpdate true, this method invoke automatic for every change in store. This is very useful for auto calculation nd update your component automatic without worry when to call to updateInformation. arguments: None nextStep(step?) Next Step method update the current step with the next step and the next step with the new next step return the next step value. NOTE : To Promise last updated result, call to updateInformation before. arguments: Property Type Required Default Description step string Optional currentStep Optional to pass the step move to. by default it move to the next step according to steps array. isLastStep() Return if the current step is the last step. NOTE : To Promise last updated result, call to updateInformation before. arguments: None Selectors Each Selector return the corresponding value from the store. NOTE is not recommended to use directly with selector. Use Step Actions async methods to get the most updated result before navigate to next step for example. getFlowType() getSubFlowTypes() getCurrentStep() getSteps() getNextStep() Flows Configuration Flows Config is an array of object, that each object define the sub flow that may be in your entire application. Each flow object have conditions array taht each condition include callback. that callback can check anything related to the condition, if the condition you check is success then return resolve, if the condition is failed then return reject. If all conditions of a sub flow pass, then this sub flow added to the subFlowTypes array Flow Object Properties: flowName: string - unique name of the sub flow type conditions: array - an array of Condition Object conditionName: string - the name of the condition onCheck: function - a promise function that return resolve when the condition success and reject if the condition should be failed mandatory: boolean - optional property. define if to remove that sub flow from the array if this condition failed. true by default. NOTE The Order of the Flow Objects in the array are matter. The checks will run by that order. const flowsConfig = [ { flowName : 'planOnlyFlow' , conditions : [ { conditionName : 'conditionA' , onCheck : conditionA }, { conditionName : 'conditionB' , onCheck : conditionB , mandatory : false } ] }, { flowName : 'onlyAccessoryFlow' , conditions : [ { conditionName : 'conditionC' , onCheck : conditionC }, { conditionName : 'conditionD' , onCheck : conditionD } ] }, { flowName : 'changePlanFlow' , conditions : [ { conditionName : 'conditionA' , onCheck : conditionA }, { conditionName : 'conditionD' , onCheck : conditionD } ] } ]; Steps Configuration Steps configuration define for each flow and sub flow, the set of steps that the user need to complete in your application. Step Object Properties: key: flowType (Example: COP ) - the key represent the flowType key: subFlowType (Example: planOnlyFlow ) - represent the subFlowType stesp: array - set of steps for this flowType and subFlowType NOTE The Order of the Sub flow Objects in the object are matter. The checks will run by that order. For example: if you put planOnlyFlow before planOnlyFlow,changePlanFlow , then planOnlyFlow always wil be set before planOnlyFlow,changePlanFlow . const stepsConfig = { COP : { onlyAccessoryFlow : { steps : [ 'STEP_A' , 'STEP_B' , 'STEP_C' , ] } }, CHQ : { 'planOnlyFlow,changePlanFlow' : { steps : [ 'STEP_R' , 'STEP_T' , 'STEP_X' , ] }, planOnlyFlow : { steps : [ 'STEP_B' , 'STEP_C' , 'STEP_D' , ] }, changePlanFlow : { steps : [ 'STEP_A' , 'STEP_D' , 'STEP_E' , ] } } }; XState getMachineFlowConfig() Return an XState config that can be set in XState visualizer to see your state machine created by your config. arguments: None XState Visualizer","title":"Flow Manager"},{"location":"extensions/client/flow_manager/#redux-flow-manager","text":"Flow Manager help you to manage flow information by determine the current step, next step and define the set of conditions that satisfy the steps. Flow Manger using XState for state machine to calculate where are you currently in the flow and where you need to go.","title":"redux-flow-manager"},{"location":"extensions/client/flow_manager/#motivation","text":"redux-flow-manager created to help you manage application with complex flows. In the flow diagram below you can see example of one flow that can be in your application. In that flow diagram, each color is sub flow , and green and red steps are start and end flow. Redux Flow Manager help you to manage this sub flows and get decisions where you are and where you need to go.","title":"Motivation"},{"location":"extensions/client/flow_manager/#install","text":"npm install --save redux-flow-manager","title":"Install"},{"location":"extensions/client/flow_manager/#usage","text":"Check out the the example in the files app.ts and flowManger.browser.ts in the test folder . Step 1: Add the flow manager reducer to your project. import { combineReducers } from 'redux' ; import { flowManagerReducer } from 'redux-flow-manager' ; const rootReducer = combineReducers ({ flowManager : flowManagerReducer }); ... Step 2: Create Steps Configuration file - steps config define the set of steps for each sub flow types. (config files properties are explained below. Steps Configuration Step 3: Create Flows Configuration file - flow config file define the sub flow types name and the conditions that should be success to make this sub flow valid. (config files properties are explained below. Flows Configuration Step 4: Call CreateFlowManagerAPI with your store, reducer slice name, flows configuration and steps configuration. ( more details of how configuration should be look like will explain later ) // ./index.js import store from './store' ; import CreateFlowManagerAPI from 'redux-flow-manager' ; export default CreateFlowManagerAPI ( store , 'flowManager' , flowsConfig , stepsConfig ); Step 5: CreateFlowManagerAPI return an instance of Flow Manager with functionality that will help you manage flows in your app. // ./SomeComponent.jsx class App extends SomeComponent { // will set teh main flow type when clock on button render () { return ( < button onClick = {() => flowManagerAPI . startFlow ( 'CHQ' , true );} > Start CHQ Flow < /button> ); } } // ./OtherComponent class App extends OtherComponent { // get the next step const nextStep = flowManagerAPI . getNextStep (); render () { return ( < button onClick = {() => redirectToStep ( nextStep )} > Move to Next Step < /button> ); } }","title":"Usage"},{"location":"extensions/client/flow_manager/#store-structure","text":"interface FlowManagerState { flowType : string ; subFlowTypes : Array < string > ; currentStep : string ; nextStep : string ; steps : Array < string > ; }","title":"Store Structure"},{"location":"extensions/client/flow_manager/#initial-flow-manager","text":"","title":"Initial Flow Manager"},{"location":"extensions/client/flow_manager/#createflowmanagerapistore-slicename-flowsconfig-stepsconfig","text":"Create new instance of flow manager. All the API methods of flow manager describe below.","title":"CreateFlowManagerAPI(store, sliceName, flowsConfig, stepsConfig);"},{"location":"extensions/client/flow_manager/#arguments","text":"Property Type Required Default Description store object Required undefined Pass in the redux store. sliceName string Required undefined the name of the reducer slice flowsConfig SubFlowsConfig Required undefined Flows Configuration stepsConfig StepsConfig Required undefined Steps Configuration","title":"arguments:"},{"location":"extensions/client/flow_manager/#start-and-end-flow","text":"","title":"Start and End Flow"},{"location":"extensions/client/flow_manager/#async-startflowflowtype-autoupdate-currentstep","text":"Start flow is used when your app is init the main flow type in the store. That flow type represent a set of sub flow types in your Flows Configuration","title":"async startFlow(flowType, autoUpdate, currentStep)"},{"location":"extensions/client/flow_manager/#arguments_1","text":"Property Type Required Default Description flowType string Required undefined The flow type that represent a set of sub flow types Flows Configuration currentStep string Required undefined Initial specific step by start the flow instead of the first step that define in steps array autoUpdate boolean Optional undefined Optionally pass indicate to automatic run state machine calculator to calculate the flow information data for any change in store","title":"arguments:"},{"location":"extensions/client/flow_manager/#endflow","text":"End the flow. Clear all the data from flow manager.","title":"endFlow()"},{"location":"extensions/client/flow_manager/#arguments_2","text":"None","title":"arguments:"},{"location":"extensions/client/flow_manager/#steps-actions","text":"","title":"Steps Actions"},{"location":"extensions/client/flow_manager/#async-updateinformation","text":"Update Information running the state machine to calculate the sub flows condition and update the steps information and sub flows. NOTE : If you call startFlow with autoUpdate true, this method invoke automatic for every change in store. This is very useful for auto calculation nd update your component automatic without worry when to call to updateInformation.","title":"async updateInformation()"},{"location":"extensions/client/flow_manager/#arguments_3","text":"None","title":"arguments:"},{"location":"extensions/client/flow_manager/#nextstepstep","text":"Next Step method update the current step with the next step and the next step with the new next step return the next step value. NOTE : To Promise last updated result, call to updateInformation before.","title":"nextStep(step?)"},{"location":"extensions/client/flow_manager/#arguments_4","text":"Property Type Required Default Description step string Optional currentStep Optional to pass the step move to. by default it move to the next step according to steps array.","title":"arguments:"},{"location":"extensions/client/flow_manager/#islaststep","text":"Return if the current step is the last step. NOTE : To Promise last updated result, call to updateInformation before.","title":"isLastStep()"},{"location":"extensions/client/flow_manager/#arguments_5","text":"None","title":"arguments:"},{"location":"extensions/client/flow_manager/#selectors","text":"Each Selector return the corresponding value from the store. NOTE is not recommended to use directly with selector. Use Step Actions async methods to get the most updated result before navigate to next step for example. getFlowType() getSubFlowTypes() getCurrentStep() getSteps() getNextStep()","title":"Selectors"},{"location":"extensions/client/flow_manager/#flows-configuration","text":"Flows Config is an array of object, that each object define the sub flow that may be in your entire application. Each flow object have conditions array taht each condition include callback. that callback can check anything related to the condition, if the condition you check is success then return resolve, if the condition is failed then return reject. If all conditions of a sub flow pass, then this sub flow added to the subFlowTypes array Flow Object Properties: flowName: string - unique name of the sub flow type conditions: array - an array of Condition Object conditionName: string - the name of the condition onCheck: function - a promise function that return resolve when the condition success and reject if the condition should be failed mandatory: boolean - optional property. define if to remove that sub flow from the array if this condition failed. true by default. NOTE The Order of the Flow Objects in the array are matter. The checks will run by that order. const flowsConfig = [ { flowName : 'planOnlyFlow' , conditions : [ { conditionName : 'conditionA' , onCheck : conditionA }, { conditionName : 'conditionB' , onCheck : conditionB , mandatory : false } ] }, { flowName : 'onlyAccessoryFlow' , conditions : [ { conditionName : 'conditionC' , onCheck : conditionC }, { conditionName : 'conditionD' , onCheck : conditionD } ] }, { flowName : 'changePlanFlow' , conditions : [ { conditionName : 'conditionA' , onCheck : conditionA }, { conditionName : 'conditionD' , onCheck : conditionD } ] } ];","title":"Flows Configuration"},{"location":"extensions/client/flow_manager/#steps-configuration","text":"Steps configuration define for each flow and sub flow, the set of steps that the user need to complete in your application. Step Object Properties: key: flowType (Example: COP ) - the key represent the flowType key: subFlowType (Example: planOnlyFlow ) - represent the subFlowType stesp: array - set of steps for this flowType and subFlowType NOTE The Order of the Sub flow Objects in the object are matter. The checks will run by that order. For example: if you put planOnlyFlow before planOnlyFlow,changePlanFlow , then planOnlyFlow always wil be set before planOnlyFlow,changePlanFlow . const stepsConfig = { COP : { onlyAccessoryFlow : { steps : [ 'STEP_A' , 'STEP_B' , 'STEP_C' , ] } }, CHQ : { 'planOnlyFlow,changePlanFlow' : { steps : [ 'STEP_R' , 'STEP_T' , 'STEP_X' , ] }, planOnlyFlow : { steps : [ 'STEP_B' , 'STEP_C' , 'STEP_D' , ] }, changePlanFlow : { steps : [ 'STEP_A' , 'STEP_D' , 'STEP_E' , ] } } };","title":"Steps Configuration"},{"location":"extensions/client/flow_manager/#xstate","text":"","title":"XState"},{"location":"extensions/client/flow_manager/#getmachineflowconfig","text":"Return an XState config that can be set in XState visualizer to see your state machine created by your config.","title":"getMachineFlowConfig()"},{"location":"extensions/client/flow_manager/#arguments_6","text":"None XState Visualizer","title":"arguments:"},{"location":"extensions/client/form_containers/","text":"Generate Form Containers Form Container is similar to regular container. The only one different is that Form Container is connected with connectWithReduxForm . Form Container give you the control to display validations, error, warnings, clear form etc... with easy way. It work with Core Components. Create Form Container by cli $ gulp createFormContainer --className myClassName Example Code import * as React from 'react' ; import { baseConnectForm } from '@base/features/base-redux-react-connect' ; import { InjectedFormProps , Form } from 'redux-form' ; import { IApplicationState } from 'actions/redux' ; // import MyFormContainerActions, { myFormContainerSelector } from 'actions/redux/myFormContainer'; interface IProps extends InjectedFormProps { } class MyFormContainer extends React . Component < IProps > { render () { return ( < Form onSubmit = { this . props . handleSubmit ( this . handleSubmit . bind ( this ))} > < /Form> ); } handleSubmit ( props : IProps ) { // handle submit here } validate ( values : any ) { const errors = {}; /* EXAMPLE CODE if (!values.title) { errors.title = 'someTitle'; } */ return errors ; } } export default baseConnectForm ( MyFormContainer , ( state : IApplicationState ) => { return { } }, { }, { form : 'MyFormContainerForm' , fields : [] } );","title":"Generate Form Containers"},{"location":"extensions/client/form_containers/#generate-form-containers","text":"Form Container is similar to regular container. The only one different is that Form Container is connected with connectWithReduxForm . Form Container give you the control to display validations, error, warnings, clear form etc... with easy way. It work with Core Components.","title":"Generate Form Containers"},{"location":"extensions/client/form_containers/#create-form-container-by-cli","text":"$ gulp createFormContainer --className myClassName","title":"Create Form Container by cli"},{"location":"extensions/client/form_containers/#example-code","text":"import * as React from 'react' ; import { baseConnectForm } from '@base/features/base-redux-react-connect' ; import { InjectedFormProps , Form } from 'redux-form' ; import { IApplicationState } from 'actions/redux' ; // import MyFormContainerActions, { myFormContainerSelector } from 'actions/redux/myFormContainer'; interface IProps extends InjectedFormProps { } class MyFormContainer extends React . Component < IProps > { render () { return ( < Form onSubmit = { this . props . handleSubmit ( this . handleSubmit . bind ( this ))} > < /Form> ); } handleSubmit ( props : IProps ) { // handle submit here } validate ( values : any ) { const errors = {}; /* EXAMPLE CODE if (!values.title) { errors.title = 'someTitle'; } */ return errors ; } } export default baseConnectForm ( MyFormContainer , ( state : IApplicationState ) => { return { } }, { }, { form : 'MyFormContainerForm' , fields : [] } );","title":"Example Code"},{"location":"extensions/client/global_spinner/","text":"Global Spinner Global Spinner Concept While we perform Api calls, most of the time we want the page show indication that page load, this is why we need loader. The global Spinner feather in harmony do it easly and automatic without any effort. Any time there is \"pending\" request in the network, global spinner will be display. That mean in redux speak - any time we have network task, we will have value greater then 1 in store under pendingTask slice. But, what about api calls that we dont want to display global spinner and block the screen ? how we can customize the spinner ? Ignore List Location - src/configurations/spinner.config.json In that file you can add any regex value to be ignore. any URI on that list will be ignore by the Global Spinner. { \"ignoreList\" : [ \"http://.*:5555/devices\" ] } Customization Location - src/pages/App.tsx In that file we are using standard Spinner Component. You can replace it with any Spinner do you like and decied display it or not display it by the pendingTask value is greater then 1. import React from \"react\" ; import { Component } from \"react\" ; import { connect } from \"react-redux\" ; import { ActivityIndicator , View } from \"react-native\" ; import ReactotronConfig from './config/reactotron.config' ; import Navigator from \"./pages/Navigator\" ; import { PendingTasks } from \"@base/features/base-global-spinner/reducer\" ; interface Props { pendingTasks : PendingTasks ; } class App extends Component < Props > { render () { const { pendingTasks } = this . props ; const loading = pendingTasks ? . length ; return ( <> { loading ? < View style = {{ position : 'absolute' , top : 0 , left : 0 , bottom : 0 , right : 0 , alignItems : \"center\" , justifyContent : \"center\" , zIndex : 20 }} > < ActivityIndicator size = \"large\" /> < /View> : ''} < Navigator /> < /> ) } } const mapStateToProps = ( state : any ) => { console . log ( state ); return { pendingTasks : state . globalSpinner . pendingTasks , } }; export const mapDispatchToProps = () => { return { }; }; export default connect ( mapStateToProps , null )( App );","title":"Global Spinner"},{"location":"extensions/client/global_spinner/#global-spinner","text":"","title":"Global Spinner"},{"location":"extensions/client/global_spinner/#global-spinner-concept","text":"While we perform Api calls, most of the time we want the page show indication that page load, this is why we need loader. The global Spinner feather in harmony do it easly and automatic without any effort. Any time there is \"pending\" request in the network, global spinner will be display. That mean in redux speak - any time we have network task, we will have value greater then 1 in store under pendingTask slice. But, what about api calls that we dont want to display global spinner and block the screen ? how we can customize the spinner ?","title":"Global Spinner Concept"},{"location":"extensions/client/global_spinner/#ignore-list","text":"Location - src/configurations/spinner.config.json In that file you can add any regex value to be ignore. any URI on that list will be ignore by the Global Spinner. { \"ignoreList\" : [ \"http://.*:5555/devices\" ] }","title":"Ignore List"},{"location":"extensions/client/global_spinner/#customization","text":"Location - src/pages/App.tsx In that file we are using standard Spinner Component. You can replace it with any Spinner do you like and decied display it or not display it by the pendingTask value is greater then 1. import React from \"react\" ; import { Component } from \"react\" ; import { connect } from \"react-redux\" ; import { ActivityIndicator , View } from \"react-native\" ; import ReactotronConfig from './config/reactotron.config' ; import Navigator from \"./pages/Navigator\" ; import { PendingTasks } from \"@base/features/base-global-spinner/reducer\" ; interface Props { pendingTasks : PendingTasks ; } class App extends Component < Props > { render () { const { pendingTasks } = this . props ; const loading = pendingTasks ? . length ; return ( <> { loading ? < View style = {{ position : 'absolute' , top : 0 , left : 0 , bottom : 0 , right : 0 , alignItems : \"center\" , justifyContent : \"center\" , zIndex : 20 }} > < ActivityIndicator size = \"large\" /> < /View> : ''} < Navigator /> < /> ) } } const mapStateToProps = ( state : any ) => { console . log ( state ); return { pendingTasks : state . globalSpinner . pendingTasks , } }; export const mapDispatchToProps = () => { return { }; }; export default connect ( mapStateToProps , null )( App );","title":"Customization"},{"location":"extensions/client/mobile-app/","text":"Mobile App Quick Start Quick Start Inside mobile-app folder, run the following command: Android Install Android Studio npm run installations --platform=android (run in android studio) npm run start --platform=android iOS Install Xcode (Applied only for MAC users) npm run installations --platform=ios npm run start --platform=ios Development Inside mobile-app folder, run the following command: Info Make sure your Emulator is up. Android npm start --platform=android iOS npm start --platform=ios Production Inside mobile-app folder, run the following command: Android npm run build --platform=android iOS npm run build --platform=ios Useful Information Assets Warning Make sure you replace the existing assets with yours (follow the same resulution for each image, located in res folder) Installations Manually Pre-Required Harmony make sure Harmony already installed - npm install ( from root project ) install cordova on your machine: npm i cordova -g ( latest cordova version tested 10.0.0 ) Android Install Android Studio iOS Install Xcode (Applied only for MAC users) Add Platforms Make sure you have www folder in mobile-app folder. Inside mobile-app folder, run the following commands: npm install Android cordova platform add cordova-android@^9.0.0 iOS cordova platform add cordova-ios@^6.1.1 Run First Build Android ( from android studio ) cordova build android iOS cordova build ios Once you added the platforms, it will add the plugins from harmony-plugins directory Only Build Cordova manually cordova build android cordova build ios Only Run Cordova manually cordova run android cordova run ios Applying changes in the source project cordova prepare android cordova prepare ios Removing Platforms cordova platform remove ios cordova platform remove android Plugins - Manual (Optional) cordova plugin add harmony-boilerplate/mobile-app/harmony-plugins/plugins/cordova-plugin-ionic-webview cordova plugin add harmony-boilerplate/mobile-app/harmony-plugins/plugins/cordova-plugin-inappbrowser cordova plugin add harmony-boilerplate/mobile-app/harmony-plugins/plugins/cordova-plugin-native-spinner cordova plugin add harmony-boilerplate/mobile-app/harmony-plugins/plugins/cordova-plugin-splashscreen cordova plugin add harmony-boilerplate/mobile-app/harmony-plugins/plugins/cordova-plugin-statusbar cordova plugin add harmony-boilerplate/mobile-app/harmony-plugins/plugins/cordova-plugin-whitelist cordova plugin add harmony-boilerplate/mobile-app/harmony-plugins/plugins/phonegap-plugin-contentsync","title":"Mobile app"},{"location":"extensions/client/mobile-app/#mobile-app","text":"","title":"Mobile App"},{"location":"extensions/client/mobile-app/#quick-start","text":"Quick Start Inside mobile-app folder, run the following command:","title":"Quick Start"},{"location":"extensions/client/mobile-app/#android","text":"Install Android Studio npm run installations --platform=android (run in android studio) npm run start --platform=android","title":"Android"},{"location":"extensions/client/mobile-app/#ios","text":"Install Xcode (Applied only for MAC users) npm run installations --platform=ios npm run start --platform=ios","title":"iOS"},{"location":"extensions/client/mobile-app/#development","text":"Inside mobile-app folder, run the following command: Info Make sure your Emulator is up.","title":"Development"},{"location":"extensions/client/mobile-app/#android_1","text":"npm start --platform=android","title":"Android"},{"location":"extensions/client/mobile-app/#ios_1","text":"npm start --platform=ios","title":"iOS"},{"location":"extensions/client/mobile-app/#production","text":"Inside mobile-app folder, run the following command:","title":"Production"},{"location":"extensions/client/mobile-app/#android_2","text":"npm run build --platform=android","title":"Android"},{"location":"extensions/client/mobile-app/#ios_2","text":"npm run build --platform=ios","title":"iOS"},{"location":"extensions/client/mobile-app/#useful-information","text":"","title":"Useful Information"},{"location":"extensions/client/mobile-app/#assets","text":"Warning Make sure you replace the existing assets with yours (follow the same resulution for each image, located in res folder)","title":"Assets"},{"location":"extensions/client/mobile-app/#installations-manually","text":"","title":"Installations Manually"},{"location":"extensions/client/mobile-app/#pre-required","text":"","title":"Pre-Required"},{"location":"extensions/client/mobile-app/#harmony","text":"make sure Harmony already installed - npm install ( from root project ) install cordova on your machine: npm i cordova -g ( latest cordova version tested 10.0.0 )","title":"Harmony"},{"location":"extensions/client/mobile-app/#android_3","text":"Install Android Studio","title":"Android"},{"location":"extensions/client/mobile-app/#ios_3","text":"Install Xcode (Applied only for MAC users)","title":"iOS"},{"location":"extensions/client/mobile-app/#add-platforms","text":"Make sure you have www folder in mobile-app folder. Inside mobile-app folder, run the following commands: npm install","title":"Add Platforms"},{"location":"extensions/client/mobile-app/#android_4","text":"cordova platform add cordova-android@^9.0.0","title":"Android"},{"location":"extensions/client/mobile-app/#ios_4","text":"cordova platform add cordova-ios@^6.1.1","title":"iOS"},{"location":"extensions/client/mobile-app/#run-first-build","text":"","title":"Run First Build"},{"location":"extensions/client/mobile-app/#android-from-android-studio","text":"cordova build android","title":"Android ( from android studio )"},{"location":"extensions/client/mobile-app/#ios_5","text":"cordova build ios Once you added the platforms, it will add the plugins from harmony-plugins directory","title":"iOS"},{"location":"extensions/client/mobile-app/#only-build-cordova-manually","text":"cordova build android cordova build ios","title":"Only Build Cordova manually"},{"location":"extensions/client/mobile-app/#only-run-cordova-manually","text":"cordova run android cordova run ios","title":"Only Run Cordova manually"},{"location":"extensions/client/mobile-app/#applying-changes-in-the-source-project","text":"cordova prepare android cordova prepare ios","title":"Applying changes in the source project"},{"location":"extensions/client/mobile-app/#removing-platforms","text":"cordova platform remove ios cordova platform remove android","title":"Removing Platforms"},{"location":"extensions/client/mobile-app/#plugins-manual-optional","text":"cordova plugin add harmony-boilerplate/mobile-app/harmony-plugins/plugins/cordova-plugin-ionic-webview cordova plugin add harmony-boilerplate/mobile-app/harmony-plugins/plugins/cordova-plugin-inappbrowser cordova plugin add harmony-boilerplate/mobile-app/harmony-plugins/plugins/cordova-plugin-native-spinner cordova plugin add harmony-boilerplate/mobile-app/harmony-plugins/plugins/cordova-plugin-splashscreen cordova plugin add harmony-boilerplate/mobile-app/harmony-plugins/plugins/cordova-plugin-statusbar cordova plugin add harmony-boilerplate/mobile-app/harmony-plugins/plugins/cordova-plugin-whitelist cordova plugin add harmony-boilerplate/mobile-app/harmony-plugins/plugins/phonegap-plugin-contentsync","title":"Plugins - Manual (Optional)"},{"location":"extensions/client/multilingual/","text":"Multilingual i18n give you easy way to support with languages and Encapsulate all you titles and static strings in your application to one place and easily to rename or change it. i18next documentation. The configuration options and translation functionalities like plurals, formatting, interpolation import i18n from \"i18next\" ; import { initReactI18next } from \"react-i18next\" ; export default i18n . use ( initReactI18next ) . init ({ // we init with resources compatibilityJSON : 'v3' , resources : { en : { translations : { \"Welcome to React\" : \"Welcome to Harmony\" , \"Language description\" : \"Supported languages located in translations folder, we are using i18next-react\" } }, de : { translations : { \"Welcome to React\" : \"Willkommen bei Harmonie\" , \"Language description\" : \"Unterst\u00fctzte Sprachen befinden sich im \u00dcbersetzungsordner, wir verwenden i18next-react\" } } }, fallbackLng : \"en\" , debug : true , // have a common namespace used around the full app ns : [ \"translations\" ], defaultNS : \"translations\" , keySeparator : false , // we use content as keys interpolation : { escapeValue : false } });","title":"Translator"},{"location":"extensions/client/multilingual/#multilingual","text":"i18n give you easy way to support with languages and Encapsulate all you titles and static strings in your application to one place and easily to rename or change it. i18next documentation. The configuration options and translation functionalities like plurals, formatting, interpolation import i18n from \"i18next\" ; import { initReactI18next } from \"react-i18next\" ; export default i18n . use ( initReactI18next ) . init ({ // we init with resources compatibilityJSON : 'v3' , resources : { en : { translations : { \"Welcome to React\" : \"Welcome to Harmony\" , \"Language description\" : \"Supported languages located in translations folder, we are using i18next-react\" } }, de : { translations : { \"Welcome to React\" : \"Willkommen bei Harmonie\" , \"Language description\" : \"Unterst\u00fctzte Sprachen befinden sich im \u00dcbersetzungsordner, wir verwenden i18next-react\" } } }, fallbackLng : \"en\" , debug : true , // have a common namespace used around the full app ns : [ \"translations\" ], defaultNS : \"translations\" , keySeparator : false , // we use content as keys interpolation : { escapeValue : false } });","title":"Multilingual"},{"location":"extensions/client/rba/","text":"RBA RBA Concept RBA is built-in feature in harmony that give you the option to store in redux store the permissions list to the store after login. RBA Actions RBA is a base feature that not import automatic to harmony project. you can find and use RBA feature if you need under: src\\base\\features\\base-rba RBAStatus - enum of the all the possible status of each permission hidden disabled secured loadRBAData - async call to the RBA api and store it in rba slice in store. basically you call it once user login. cleanRBAData - clear the rba permissions from cart. basically you call it when user perform logout. getPermissions - selector to return the permission object from store. What is the structure of the permissions object after the mapping process? { rba: { permissions: { shippment: 'hidden', searchInput: 'disabled', addToCart: 'disabled' } } } RBAC Component To use the RBAC component that will wrap your ui component you need to do the following: import RBAC from '@base/features/base-rba/components/RBAC' ; In your render you will need to use it as following: < RBAC id = \"searchInput\" > < Form . Control type = \"text\" data - automation - id = \"filter-input\" placeholder = \"Search\" onChange = {( e ) => this . setState ({ searchValue : e . target . value . toLowerCase () })} /> < /RBAC>","title":"RBA"},{"location":"extensions/client/rba/#rba","text":"","title":"RBA"},{"location":"extensions/client/rba/#rba-concept","text":"RBA is built-in feature in harmony that give you the option to store in redux store the permissions list to the store after login.","title":"RBA Concept"},{"location":"extensions/client/rba/#rba-actions","text":"RBA is a base feature that not import automatic to harmony project. you can find and use RBA feature if you need under: src\\base\\features\\base-rba RBAStatus - enum of the all the possible status of each permission hidden disabled secured loadRBAData - async call to the RBA api and store it in rba slice in store. basically you call it once user login. cleanRBAData - clear the rba permissions from cart. basically you call it when user perform logout. getPermissions - selector to return the permission object from store. What is the structure of the permissions object after the mapping process? { rba: { permissions: { shippment: 'hidden', searchInput: 'disabled', addToCart: 'disabled' } } }","title":"RBA Actions"},{"location":"extensions/client/rba/#rbac-component","text":"To use the RBAC component that will wrap your ui component you need to do the following: import RBAC from '@base/features/base-rba/components/RBAC' ; In your render you will need to use it as following: < RBAC id = \"searchInput\" > < Form . Control type = \"text\" data - automation - id = \"filter-input\" placeholder = \"Search\" onChange = {( e ) => this . setState ({ searchValue : e . target . value . toLowerCase () })} /> < /RBAC>","title":"RBAC Component"},{"location":"extensions/client/render_mobile/","text":"Mobile Render Mobile Render Concept Webapp required us to support multiple screen sizes. Single render method in react component and detection can take effort. Harmony Provide you built-in open source library for different screens. Library Reference @artsy/fresnel Usage class App extends React . Component < Props > { render () { const { children , pendingTasks } = this . props ; const loading = pendingTasks ? . length ; return ( <> < ErrorHandler /> {( !! loading ) && < Spinner /> } < Localization /> < Header /> < Media greaterThan = \"sm\" > { children } < /Media> < Media at = \"sm\" > < h1 > This is Render Example for 0 - 768 screen size < /h1> { children } < /Media> < /> ); } }","title":"Mobile Render"},{"location":"extensions/client/render_mobile/#mobile-render","text":"","title":"Mobile Render"},{"location":"extensions/client/render_mobile/#mobile-render-concept","text":"Webapp required us to support multiple screen sizes. Single render method in react component and detection can take effort. Harmony Provide you built-in open source library for different screens. Library Reference @artsy/fresnel","title":"Mobile Render Concept"},{"location":"extensions/client/render_mobile/#usage","text":"class App extends React . Component < Props > { render () { const { children , pendingTasks } = this . props ; const loading = pendingTasks ? . length ; return ( <> < ErrorHandler /> {( !! loading ) && < Spinner /> } < Localization /> < Header /> < Media greaterThan = \"sm\" > { children } < /Media> < Media at = \"sm\" > < h1 > This is Render Example for 0 - 768 screen size < /h1> { children } < /Media> < /> ); } }","title":"Usage"},{"location":"extensions/client/requests/","text":"Requests Requests Location : client/requests/index.ts API Requests is one of the features coming from Harmony. Requests class include the following methods: call Call to API Parameters: config - axios config json. Usage import from src/base/base-api/index.ts request . call ({ method : 'post' , baseURL : baseURL , url : 'users/login' , data : data }); Requests Definitions File Location : ./src/requests/index.ts In requests file we define all the requests calls and use it in sagas. Harmony prefer to use one file to export requests definitions for Best Practice. Example Code createUser : ( data ) => { return request . call ({ method : 'post' , baseURL : baseURL , url : '/users' , data : data }); } Usage Example: getDevices : () => request . call ({ baseURL : 'http://6ew7g.mocklab.io/' || baseURL , method : 'get' , url : '/getlatestWithCustomResponseCode' }, { unauthorized : true , generalErrorInfo : { errorCode : 'getDevicesFiledForSomeReason' , status : 500 } })","title":"Requests"},{"location":"extensions/client/requests/#requests","text":"","title":"Requests"},{"location":"extensions/client/requests/#requests_1","text":"Location : client/requests/index.ts API Requests is one of the features coming from Harmony. Requests class include the following methods:","title":"Requests"},{"location":"extensions/client/requests/#call","text":"Call to API Parameters: config - axios config json. Usage import from src/base/base-api/index.ts request . call ({ method : 'post' , baseURL : baseURL , url : 'users/login' , data : data });","title":"call"},{"location":"extensions/client/requests/#requests-definitions-file","text":"Location : ./src/requests/index.ts In requests file we define all the requests calls and use it in sagas. Harmony prefer to use one file to export requests definitions for Best Practice.","title":"Requests Definitions File"},{"location":"extensions/client/requests/#example-code","text":"createUser : ( data ) => { return request . call ({ method : 'post' , baseURL : baseURL , url : '/users' , data : data }); } Usage Example: getDevices : () => request . call ({ baseURL : 'http://6ew7g.mocklab.io/' || baseURL , method : 'get' , url : '/getlatestWithCustomResponseCode' }, { unauthorized : true , generalErrorInfo : { errorCode : 'getDevicesFiledForSomeReason' , status : 500 } })","title":"Example Code"},{"location":"extensions/client/sagas/","text":"Generate Sagas Location : client/sagas/ Sagas is middleware between the Action and the Reducer when action need API call. In our project we apply the sagas middleware only with 1 root index file. src/actions/sagas/index.ts is the root to all the sagas you write and inside the sagas/ folder you add all the folders that Files Created The Generator of Saga will create 3 files: index.ts - to watch and export all sagas. sagas.ts - here all the sagas functions. manager.ts - Function that are not sagas ( as utils etc ..). Create Saga by cli $ gulp createSaga --name mySaga Example Code index.ts function * watchGetDevices () { yield takeLatest ( CatalogTypes . GET_DEVICE_LIST , getDevices ); } function * catalogSaga () { yield all ([ fork ( watchGetDevices ) ]); } export default catalogSaga ; Example Code sagas.ts import { all , call , fork , put , takeLatest } from 'redux-saga/effects' ; import { AxiosResponse } from 'axios' ; import api from 'requests' ; import CatalogActions , { CatalogTypes } from 'actions/redux/catalog' ; import { IDevice } from 'actions/redux/catalog/interfaces' ; function * getDevices () { try { const response : AxiosResponse < IDevice [] > = yield call ( api . getDevices ); yield put ( CatalogActions . setDeviceList ( response . data )); } catch ( e ) { console . log ( e ); } } Redux Sagas For more information, read on https://github.com/redux-saga/redux-saga What is takeLatest? ( alias ) takeLatest < any , any > ( pattern : Pattern < any > , worker : HelperFunc1 < any , any > , arg1 : any ) : ForkEffect ( + 5 overloads ) import takeLatest Alternatively you may use takeLatest. Does not allow concurrent fetches of user. If \"SOME_ACTION\" gets dispatched while a fetch is already pending, that pending fetch is cancelled and only the latest one will be run.","title":"Sagas"},{"location":"extensions/client/sagas/#generate-sagas","text":"Location : client/sagas/ Sagas is middleware between the Action and the Reducer when action need API call. In our project we apply the sagas middleware only with 1 root index file. src/actions/sagas/index.ts is the root to all the sagas you write and inside the sagas/ folder you add all the folders that","title":"Generate Sagas"},{"location":"extensions/client/sagas/#files-created","text":"The Generator of Saga will create 3 files: index.ts - to watch and export all sagas. sagas.ts - here all the sagas functions. manager.ts - Function that are not sagas ( as utils etc ..).","title":"Files Created"},{"location":"extensions/client/sagas/#create-saga-by-cli","text":"$ gulp createSaga --name mySaga","title":"Create Saga by cli"},{"location":"extensions/client/sagas/#example-code-indexts","text":"function * watchGetDevices () { yield takeLatest ( CatalogTypes . GET_DEVICE_LIST , getDevices ); } function * catalogSaga () { yield all ([ fork ( watchGetDevices ) ]); } export default catalogSaga ;","title":"Example Code index.ts"},{"location":"extensions/client/sagas/#example-code-sagasts","text":"import { all , call , fork , put , takeLatest } from 'redux-saga/effects' ; import { AxiosResponse } from 'axios' ; import api from 'requests' ; import CatalogActions , { CatalogTypes } from 'actions/redux/catalog' ; import { IDevice } from 'actions/redux/catalog/interfaces' ; function * getDevices () { try { const response : AxiosResponse < IDevice [] > = yield call ( api . getDevices ); yield put ( CatalogActions . setDeviceList ( response . data )); } catch ( e ) { console . log ( e ); } } Redux Sagas For more information, read on https://github.com/redux-saga/redux-saga What is takeLatest? ( alias ) takeLatest < any , any > ( pattern : Pattern < any > , worker : HelperFunc1 < any , any > , arg1 : any ) : ForkEffect ( + 5 overloads ) import takeLatest Alternatively you may use takeLatest. Does not allow concurrent fetches of user. If \"SOME_ACTION\" gets dispatched while a fetch is already pending, that pending fetch is cancelled and only the latest one will be run.","title":"Example Code sagas.ts"},{"location":"extensions/client/seo/","text":"SEO Decorator Location : base/features/decorators/withSEO With SEO is a Decorator that can use for any component to simplify the using and heading headers when this component on screen. Headers automatic added and removed if the component is in or out the screen. Using Example import { withSEO } from '@base/features/base-decorator/withSEO' ; ... @ withSEO ({ helmet : ( props : Props ) => { const { device } = props ; return ( [ < meta key = \"description\" name = { device . name } content = { device . description } /> , < meta key = \"title\" title = { device . name } content = { device . name } /> , < meta key = \"og:type\" property = \"og:type\" content = \"product\" /> , < meta key = \"og:image\" property = \"og:image\" content = { device . image } /> , ] ); } }) class DeviceDetailsPage extends React . Component < Props > { render () { ... } }","title":"Seo"},{"location":"extensions/client/seo/#seo-decorator","text":"Location : base/features/decorators/withSEO With SEO is a Decorator that can use for any component to simplify the using and heading headers when this component on screen. Headers automatic added and removed if the component is in or out the screen.","title":"SEO Decorator"},{"location":"extensions/client/seo/#using-example","text":"import { withSEO } from '@base/features/base-decorator/withSEO' ; ... @ withSEO ({ helmet : ( props : Props ) => { const { device } = props ; return ( [ < meta key = \"description\" name = { device . name } content = { device . description } /> , < meta key = \"title\" title = { device . name } content = { device . name } /> , < meta key = \"og:type\" property = \"og:type\" content = \"product\" /> , < meta key = \"og:image\" property = \"og:image\" content = { device . image } /> , ] ); } }) class DeviceDetailsPage extends React . Component < Props > { render () { ... } }","title":"Using Example"},{"location":"extensions/client/storybook/","text":"Storybook Harmony include Storybook built-in, althgo most of the usage is related to the official documentation Storybook with React Native , Run the storybook in Harmony You need to execute the following in the root folder npm run storybook Execute the following to run the mobile app - the storybook will be presented inside the mobile app and the selection of the components will be in the website. npm run ios Modify the index.tsx /** * @format */ import { AppRegistry , Platform } from 'react-native' ; import { name as appName } from './app.json' ; import RootContainer from 'src/RootContainer' ; // import RootContainer from './src/RootContainer'; /* STORYBOOK import { getStorybookUI, configure, addDecorator } from '@storybook/react-native'; import { withKnobs } from '@storybook/addon-knobs'; import './storybook/rn-addons'; // enables knobs for all stories addDecorator(withKnobs); // import stories configure(() => { require('./storybook/stories'); }, module); // Refer to https://github.com/storybookjs/react-native/tree/master/app/react-native#getstorybookui-options // To find allowed options for getStorybookUI const StorybookUIRoot = getStorybookUI({ host: Platform.OS === 'android' ? '10.0.2.2' : '0.0.0.0', port: 7007, onDeviceUI: true, asyncStorage: require('@react-native-community/async-storage').default }); // If you are using React Native vanilla and after installation you don't see your app name here, write it manually. // If you use Expo you should remove this line. AppRegistry.registerComponent(appName, () => StorybookUIRoot); export default StorybookUIRoot; */ AppRegistry . registerComponent ( appName , () => RootContainer ); You need to comment the following AppRegistry . registerComponent ( appName , () => RootContainer ); and uncomment the commented block to be as following mport { AppRegistry , Platform } from 'react-native' ; import { name as appName } from './app.json' ; import RootContainer from 'src/RootContainer' ; // import RootContainer from './src/RootContainer'; /* STORYBOOK */ import { getStorybookUI , configure , addDecorator } from '@storybook/react-native' ; import { withKnobs } from '@storybook/addon-knobs' ; import './storybook/rn-addons' ; // enables knobs for all stories addDecorator ( withKnobs ); // import stories configure (() => { require ( './storybook/stories' ); }, module ); const StorybookUIRoot = getStorybookUI ({ host : Platform.OS === 'android' ? '10.0.2.2' : '0.0.0.0' , port : 7007 , onDeviceUI : true , asyncStorage : require ( '@react-native-community/async-storage' ). default }); // If you are using React Native vanilla and after installation you don't see your app name here, write it manually. // If you use Expo you should remove this line. AppRegistry . registerComponent ( appName , () => StorybookUIRoot ); export default StorybookUIRoot ;","title":"Storybook"},{"location":"extensions/client/storybook/#storybook","text":"Harmony include Storybook built-in, althgo most of the usage is related to the official documentation Storybook with React Native ,","title":"Storybook"},{"location":"extensions/client/storybook/#run-the-storybook-in-harmony","text":"You need to execute the following in the root folder npm run storybook Execute the following to run the mobile app - the storybook will be presented inside the mobile app and the selection of the components will be in the website. npm run ios","title":"Run the storybook in Harmony"},{"location":"extensions/client/storybook/#modify-the-indextsx","text":"/** * @format */ import { AppRegistry , Platform } from 'react-native' ; import { name as appName } from './app.json' ; import RootContainer from 'src/RootContainer' ; // import RootContainer from './src/RootContainer'; /* STORYBOOK import { getStorybookUI, configure, addDecorator } from '@storybook/react-native'; import { withKnobs } from '@storybook/addon-knobs'; import './storybook/rn-addons'; // enables knobs for all stories addDecorator(withKnobs); // import stories configure(() => { require('./storybook/stories'); }, module); // Refer to https://github.com/storybookjs/react-native/tree/master/app/react-native#getstorybookui-options // To find allowed options for getStorybookUI const StorybookUIRoot = getStorybookUI({ host: Platform.OS === 'android' ? '10.0.2.2' : '0.0.0.0', port: 7007, onDeviceUI: true, asyncStorage: require('@react-native-community/async-storage').default }); // If you are using React Native vanilla and after installation you don't see your app name here, write it manually. // If you use Expo you should remove this line. AppRegistry.registerComponent(appName, () => StorybookUIRoot); export default StorybookUIRoot; */ AppRegistry . registerComponent ( appName , () => RootContainer ); You need to comment the following AppRegistry . registerComponent ( appName , () => RootContainer ); and uncomment the commented block to be as following mport { AppRegistry , Platform } from 'react-native' ; import { name as appName } from './app.json' ; import RootContainer from 'src/RootContainer' ; // import RootContainer from './src/RootContainer'; /* STORYBOOK */ import { getStorybookUI , configure , addDecorator } from '@storybook/react-native' ; import { withKnobs } from '@storybook/addon-knobs' ; import './storybook/rn-addons' ; // enables knobs for all stories addDecorator ( withKnobs ); // import stories configure (() => { require ( './storybook/stories' ); }, module ); const StorybookUIRoot = getStorybookUI ({ host : Platform.OS === 'android' ? '10.0.2.2' : '0.0.0.0' , port : 7007 , onDeviceUI : true , asyncStorage : require ( '@react-native-community/async-storage' ). default }); // If you are using React Native vanilla and after installation you don't see your app name here, write it manually. // If you use Expo you should remove this line. AppRegistry . registerComponent ( appName , () => StorybookUIRoot ); export default StorybookUIRoot ;","title":"Modify the index.tsx"},{"location":"extensions/server/authentication/","text":"Authentication Introduction We created a predefined authentication mechanism for your convenience. POST /users -> create GET /users/me -> me DELETE /users/me/logout -> logout POST /users/login -> login POST /users/broadcastAction -> broadcastAction Configuration when you are changing the config to work with MySQL, useSql flag in Configuration your authentication will work with your SQL db instance. @see server/src/api/authentication/users-sequelize const { Router } = require ( 'express' ); const controller = require ( './user.controller' ); const { authenticate } = require ( './../../../middleware/authenticate' ); var router = new Router (); /** * @api {post} authentication/users/ Create User * @apiName CreateUserToken * @apiGroup User * * @apiParam {String} email . * @apiParam {String} password . * * @apiSuccess {Object} - set header x-auth with generated token. */ router . post ( '/' , controller . create ); /** * @api {get} /authentication/users/me Get User * @apiName GetUser * @apiGroup User * * @apiSuccess {Object} - get current user. */ router . get ( '/me' , authenticate , controller . me ); /** * @api {delete} /authentication/users/me/token Logout * @apiName LogoutUser * @apiGroup User * * @apiSuccess {Object} - status 200. */ router . delete ( '/me/token' , authenticate , controller . logout ); /** * @api {post} /authentication/users/login Login * @apiName LoginUser * @apiGroup User * @apiParam {String} email . * @apiParam {String} password . * @apiSuccess {Object} - set header x-auth with generated token. */ router . post ( '/login' , controller . login ); /** * @api {post} /authentication/users/broadcastAction Broadcast Action * @apiName BroadcastAction * @apiGroup User * @apiParam {Object} action with type and payload. * @apiSuccess {Object} - broadcast to thethe action to all. */ router . post ( '/broadcastAction' , controller . broadcastAction ); module . exports = router ; Authenticate Your API Middleware You can use our authenticate middleware to your API by importing it from middleware folder. The middleware contain a function that deal with the current Model according to your configuration ( Sequelize Mongoose ) const User = require ( './../api/authentication/users-mongo/user-model' ); var authenticate = ( req , res , next ) => { let token = req . header ( 'Authorization' ); User . findByToken ( token ). then (( user ) => { if ( ! user ) { return new Promise (( resolve , reject ) => { reject (); }); } req . user = user ; req . token = token ; next (); }). catch (( e ) => { console . log ( e ); res . status ( 401 ). send (); }); }; module . exports = { authenticate } Usage const { Router } = require ( 'express' ); const { authenticate } = require ( './../../middleware/authenticate' ); const controller = require ( './posts.controller' ); var router = new Router (); /** * @api {post} /posts Create Post * @apiName CreatePosts * @apiGroup Posts * * @apiParam {String} name . * * @apiSuccess {Object} - contain message and resource id. */ router . post ( '/' , authenticate , controller . create );","title":"Authentication"},{"location":"extensions/server/authentication/#authentication","text":"","title":"Authentication"},{"location":"extensions/server/authentication/#introduction","text":"We created a predefined authentication mechanism for your convenience. POST /users -> create GET /users/me -> me DELETE /users/me/logout -> logout POST /users/login -> login POST /users/broadcastAction -> broadcastAction Configuration when you are changing the config to work with MySQL, useSql flag in Configuration your authentication will work with your SQL db instance. @see server/src/api/authentication/users-sequelize const { Router } = require ( 'express' ); const controller = require ( './user.controller' ); const { authenticate } = require ( './../../../middleware/authenticate' ); var router = new Router (); /** * @api {post} authentication/users/ Create User * @apiName CreateUserToken * @apiGroup User * * @apiParam {String} email . * @apiParam {String} password . * * @apiSuccess {Object} - set header x-auth with generated token. */ router . post ( '/' , controller . create ); /** * @api {get} /authentication/users/me Get User * @apiName GetUser * @apiGroup User * * @apiSuccess {Object} - get current user. */ router . get ( '/me' , authenticate , controller . me ); /** * @api {delete} /authentication/users/me/token Logout * @apiName LogoutUser * @apiGroup User * * @apiSuccess {Object} - status 200. */ router . delete ( '/me/token' , authenticate , controller . logout ); /** * @api {post} /authentication/users/login Login * @apiName LoginUser * @apiGroup User * @apiParam {String} email . * @apiParam {String} password . * @apiSuccess {Object} - set header x-auth with generated token. */ router . post ( '/login' , controller . login ); /** * @api {post} /authentication/users/broadcastAction Broadcast Action * @apiName BroadcastAction * @apiGroup User * @apiParam {Object} action with type and payload. * @apiSuccess {Object} - broadcast to thethe action to all. */ router . post ( '/broadcastAction' , controller . broadcastAction ); module . exports = router ;","title":"Introduction"},{"location":"extensions/server/authentication/#authenticate-your-api","text":"Middleware You can use our authenticate middleware to your API by importing it from middleware folder. The middleware contain a function that deal with the current Model according to your configuration ( Sequelize Mongoose ) const User = require ( './../api/authentication/users-mongo/user-model' ); var authenticate = ( req , res , next ) => { let token = req . header ( 'Authorization' ); User . findByToken ( token ). then (( user ) => { if ( ! user ) { return new Promise (( resolve , reject ) => { reject (); }); } req . user = user ; req . token = token ; next (); }). catch (( e ) => { console . log ( e ); res . status ( 401 ). send (); }); }; module . exports = { authenticate }","title":"Authenticate Your API"},{"location":"extensions/server/authentication/#usage","text":"const { Router } = require ( 'express' ); const { authenticate } = require ( './../../middleware/authenticate' ); const controller = require ( './posts.controller' ); var router = new Router (); /** * @api {post} /posts Create Post * @apiName CreatePosts * @apiGroup Posts * * @apiParam {String} name . * * @apiSuccess {Object} - contain message and resource id. */ router . post ( '/' , authenticate , controller . create );","title":"Usage"},{"location":"extensions/server/config/","text":"Config Server configuration located on server/src/config.js const config = { sql : { db : 'seq' , user : 'root' , pass : '' }, mongo : { dbUrl : process . env . MONGO_URL || 'mongodb://127.0.0.1:27017/db' }, useMongo : true , useSql : false , JWT_SECRET : \"YOUR_SMASHING_JWT_SECRET\" , server : { port : process . env . PORT || 8080 }, websocket : { port : process . env . WS_PORT || 3030 }, allowedActions : [ actions . FETCH_POSTS ] }; You can choose whether to use Relational DB or Non Relational such as MongoDB, change useMongo useSql according to your decisions. JWT_SECRET used for Authorization Token generation. websocket contain your websocket server configuration, we are using it for broadcasting actions on client side. amazing no? allowedActions comes with the websocket, its contain what are the actions that the websocket is allowed to broadcast to the client.","title":"Config"},{"location":"extensions/server/config/#config","text":"Server configuration located on server/src/config.js const config = { sql : { db : 'seq' , user : 'root' , pass : '' }, mongo : { dbUrl : process . env . MONGO_URL || 'mongodb://127.0.0.1:27017/db' }, useMongo : true , useSql : false , JWT_SECRET : \"YOUR_SMASHING_JWT_SECRET\" , server : { port : process . env . PORT || 8080 }, websocket : { port : process . env . WS_PORT || 3030 }, allowedActions : [ actions . FETCH_POSTS ] }; You can choose whether to use Relational DB or Non Relational such as MongoDB, change useMongo useSql according to your decisions. JWT_SECRET used for Authorization Token generation. websocket contain your websocket server configuration, we are using it for broadcasting actions on client side. amazing no? allowedActions comes with the websocket, its contain what are the actions that the websocket is allowed to broadcast to the client.","title":"Config"},{"location":"extensions/server/generate_new_api/","text":"Generate New API A proper API consist the following: Model ( Using Mongoose ) Controller ( Holding the main functions like create, update, delete, get, etc..) Responses ( JS file that contain responses relate to the current API ) routes ( Mapping the routes to the Controller ) Creating API Inorder to create your API, We suggest to use our CLI script gulp createApi --name \"YOUR_API_NAME\" Note - If you are going to use MySQL SQL PostgreSQL MSSQL you should add this: --apiType sql otherwise it will use mongodb It will generate under server/src/api folder with the files of your api : Usage gulp createApi --name post Result . \u251c\u2500\u2500 post | \u251c\u2500\u2500 post.controller.js | \u251c\u2500\u2500 index.js | \u251c\u2500\u2500 model | \u251c\u2500\u2500 post.js | \u251c\u2500\u2500 responses | \u251c\u2500\u2500 index.js Templating If you want to create your own templates you will need to add the template file under generator/templates/server and under createApi task in the gulpfile.js on the root folder do the following : gulp . task ( 'createApi' , () => { let apiName = getArg ( 'name' ); if ( ! validateName ( apiName , '--name' , false )) return ; var UPPERCASE_MODEL_NAME = apiName . toString (). toUpperCase (); var CapitalLetterModelName = capitalize ( apiName ); createTemplate ( './generator/templates/server/api-controller-template' , 'server/src/api/' + apiName + '/' + apiName + '.controller.js' , { name : apiName , upperCaseModelName : UPPERCASE_MODEL_NAME , capitalLetterModelName : CapitalLetterModelName } ); createTemplate ( './generator/templates/server/model-template' , 'server/src/api/' + apiName + '/model/' + apiName + '.js' , { capitalLetterModelName : CapitalLetterModelName } ); createTemplate ( './generator/templates/server/responses-template' , 'server/src/api/' + apiName + '/responses/index.js' , { capitalLetterModelName : CapitalLetterModelName , upperCaseModelName : UPPERCASE_MODEL_NAME } ); createTemplate ( './generator/templates/server/index-template' , 'server/src/api/' + apiName + '/index.js' , { name : apiName , capitalLetterModelName : CapitalLetterModelName } ); /***** YOUR ADDITIONS *****/ createTemplate ( './generator/templates/server/YOUR_TEMPLATE_FILE_NAME' , 'server/src/api/' + apiName + '/DESTINATION_FILE_NAME' , { name : apiName , capitalLetterModelName : CapitalLetterModelName } ); replaceText ( './server/src/routes/index.js' , './server/src/routes/' , \"// LASTLINE\" , \"app.use('/\" + apiName + \"', require('../api/\" + apiName + \"'));\\r\\n// LASTLINE\" ); });","title":"Generate New API"},{"location":"extensions/server/generate_new_api/#generate-new-api","text":"A proper API consist the following: Model ( Using Mongoose ) Controller ( Holding the main functions like create, update, delete, get, etc..) Responses ( JS file that contain responses relate to the current API ) routes ( Mapping the routes to the Controller )","title":"Generate New API"},{"location":"extensions/server/generate_new_api/#creating-api","text":"Inorder to create your API, We suggest to use our CLI script gulp createApi --name \"YOUR_API_NAME\" Note - If you are going to use MySQL SQL PostgreSQL MSSQL you should add this: --apiType sql otherwise it will use mongodb It will generate under server/src/api folder with the files of your api :","title":"Creating API"},{"location":"extensions/server/generate_new_api/#usage","text":"gulp createApi --name post","title":"Usage"},{"location":"extensions/server/generate_new_api/#result","text":". \u251c\u2500\u2500 post | \u251c\u2500\u2500 post.controller.js | \u251c\u2500\u2500 index.js | \u251c\u2500\u2500 model | \u251c\u2500\u2500 post.js | \u251c\u2500\u2500 responses | \u251c\u2500\u2500 index.js","title":"Result"},{"location":"extensions/server/generate_new_api/#templating","text":"If you want to create your own templates you will need to add the template file under generator/templates/server and under createApi task in the gulpfile.js on the root folder do the following : gulp . task ( 'createApi' , () => { let apiName = getArg ( 'name' ); if ( ! validateName ( apiName , '--name' , false )) return ; var UPPERCASE_MODEL_NAME = apiName . toString (). toUpperCase (); var CapitalLetterModelName = capitalize ( apiName ); createTemplate ( './generator/templates/server/api-controller-template' , 'server/src/api/' + apiName + '/' + apiName + '.controller.js' , { name : apiName , upperCaseModelName : UPPERCASE_MODEL_NAME , capitalLetterModelName : CapitalLetterModelName } ); createTemplate ( './generator/templates/server/model-template' , 'server/src/api/' + apiName + '/model/' + apiName + '.js' , { capitalLetterModelName : CapitalLetterModelName } ); createTemplate ( './generator/templates/server/responses-template' , 'server/src/api/' + apiName + '/responses/index.js' , { capitalLetterModelName : CapitalLetterModelName , upperCaseModelName : UPPERCASE_MODEL_NAME } ); createTemplate ( './generator/templates/server/index-template' , 'server/src/api/' + apiName + '/index.js' , { name : apiName , capitalLetterModelName : CapitalLetterModelName } ); /***** YOUR ADDITIONS *****/ createTemplate ( './generator/templates/server/YOUR_TEMPLATE_FILE_NAME' , 'server/src/api/' + apiName + '/DESTINATION_FILE_NAME' , { name : apiName , capitalLetterModelName : CapitalLetterModelName } ); replaceText ( './server/src/routes/index.js' , './server/src/routes/' , \"// LASTLINE\" , \"app.use('/\" + apiName + \"', require('../api/\" + apiName + \"'));\\r\\n// LASTLINE\" ); });","title":"Templating"},{"location":"extensions/server/server/","text":"Server Based Technologies Express APIDoc Mongoose Sequelize Server Folder Structure . \u251c\u2500\u2500 server | \u251c\u2500\u2500 docs | \u251c\u2500\u2500 src | \u251c\u2500\u2500 api | \u251c\u2500\u2500 authentication | \u251c\u2500\u2500 global | \u251c\u2500\u2500 responses | \u251c\u2500\u2500 posts | \u251c\u2500\u2500 model | \u251c\u2500\u2500 responses | \u251c\u2500\u2500 index.js | \u251c\u2500\u2500 posts.controller.js | \u251c\u2500\u2500 middleware | \u251c\u2500\u2500 authenticate.js | \u251c\u2500\u2500 authenticate-sequelize.js | \u251c\u2500\u2500 config.js | \u251c\u2500\u2500 apidoc.json | \u251c\u2500\u2500 server.js","title":"Server"},{"location":"extensions/server/server/#server","text":"","title":"Server"},{"location":"extensions/server/server/#based-technologies","text":"Express APIDoc Mongoose Sequelize","title":"Based Technologies"},{"location":"extensions/server/server/#server-folder-structure","text":". \u251c\u2500\u2500 server | \u251c\u2500\u2500 docs | \u251c\u2500\u2500 src | \u251c\u2500\u2500 api | \u251c\u2500\u2500 authentication | \u251c\u2500\u2500 global | \u251c\u2500\u2500 responses | \u251c\u2500\u2500 posts | \u251c\u2500\u2500 model | \u251c\u2500\u2500 responses | \u251c\u2500\u2500 index.js | \u251c\u2500\u2500 posts.controller.js | \u251c\u2500\u2500 middleware | \u251c\u2500\u2500 authenticate.js | \u251c\u2500\u2500 authenticate-sequelize.js | \u251c\u2500\u2500 config.js | \u251c\u2500\u2500 apidoc.json | \u251c\u2500\u2500 server.js","title":"Server Folder Structure"},{"location":"extensions/server/websocket/","text":"Websocket We created two methods inside the websocket server that you can use. const wss = new WebSocket . Server ({ port : config . websocket . port }); wss . broadcastAction = function ( request ){ try { var result = _ . find ( config . allowedActions , function ( o ) { return o === request . action . type }); if ( ! result ) { return ; } wss . broadcast ({ \"WS_ACTION\" : true , \"token\" : request . token || null , \"action\" : request . action }); } catch ( e ) { console . log ( e ); } }; wss . broadcast = function broadcast ( data ) { wss . clients . forEach ( function each ( client ) { if ( client . readyState === WebSocket . OPEN ) { client . send ( JSON . stringify ( data )); } }); }; Websocket Actions SECURE WARNING - You must to declare your allowed actions in server config. If the action is not allowed on the server, the action will not be executed ! To add allowed actions for broadcasting go to config and edit allowedActions allowedActions: [ actions.FETCH_POSTS, ... ] there is reference in the configuration file to the client actions. const actions = require('../../client/src/actions'); harmony let the client to invoke actions on each client on the system by using the websocket instance on the server. for example: lets say User A delete item from the database and want that all the users will FETCH the items again. by invoking the following API - POST /users/broadcastAction -> broadcastAction with the this payload : {type: ActionTypes.FETCH_POSTS, payload: null} the websocket instance will broadcast to all users this action. In addition, there is option to invoke the broadcasting service from each API. Websocket You can use the websocket service to pass messages between the clients or from server to clients by invoking: exports . create = function ( req , res ) { let ModelInstance = new MODEL_SERVICE (); ... req . app . get ( 'wss' ). broadcast ( YOUR_MESSAGE ); For more information check how you deal with the websocket from the client side","title":"Websocket"},{"location":"extensions/server/websocket/#websocket","text":"We created two methods inside the websocket server that you can use. const wss = new WebSocket . Server ({ port : config . websocket . port }); wss . broadcastAction = function ( request ){ try { var result = _ . find ( config . allowedActions , function ( o ) { return o === request . action . type }); if ( ! result ) { return ; } wss . broadcast ({ \"WS_ACTION\" : true , \"token\" : request . token || null , \"action\" : request . action }); } catch ( e ) { console . log ( e ); } }; wss . broadcast = function broadcast ( data ) { wss . clients . forEach ( function each ( client ) { if ( client . readyState === WebSocket . OPEN ) { client . send ( JSON . stringify ( data )); } }); };","title":"Websocket"},{"location":"extensions/server/websocket/#websocket-actions","text":"SECURE WARNING - You must to declare your allowed actions in server config. If the action is not allowed on the server, the action will not be executed ! To add allowed actions for broadcasting go to config and edit allowedActions allowedActions: [ actions.FETCH_POSTS, ... ] there is reference in the configuration file to the client actions. const actions = require('../../client/src/actions'); harmony let the client to invoke actions on each client on the system by using the websocket instance on the server. for example: lets say User A delete item from the database and want that all the users will FETCH the items again. by invoking the following API - POST /users/broadcastAction -> broadcastAction with the this payload : {type: ActionTypes.FETCH_POSTS, payload: null} the websocket instance will broadcast to all users this action. In addition, there is option to invoke the broadcasting service from each API.","title":"Websocket Actions"},{"location":"extensions/server/websocket/#websocket_1","text":"You can use the websocket service to pass messages between the clients or from server to clients by invoking: exports . create = function ( req , res ) { let ModelInstance = new MODEL_SERVICE (); ... req . app . get ( 'wss' ). broadcast ( YOUR_MESSAGE ); For more information check how you deal with the websocket from the client side","title":"Websocket"}]}